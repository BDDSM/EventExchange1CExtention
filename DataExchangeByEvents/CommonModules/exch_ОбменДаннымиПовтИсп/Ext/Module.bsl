#Область РаботаСНастройками

Функция КлючНастроек() Экспорт
	Возврат "202003051648НастройкиАтомарногоОбмена";
КонецФункции

Функция СтруктураНастроек() Экспорт
	настройки = Новый Структура;
	
	//соответствие узлов, для которых включена атомарная выгрузка
	//ключ и значение = узел
	//в дальнейшем возможно хранение настроек каждого узла в своей структуре
	//например обработка транспорта сообщения
	Узлы = Новый Соответствие;
	настройки.Вставить("Узлы", Узлы);	
	
	настройки.Вставить("КоличествоПотоковВыгрузки", 10);
	
	
	Возврат настройки;
КонецФункции

Функция Настройки() Экспорт
	ключ = КлючНастроек();
	значение = ХранилищеОбщихНастроек.Загрузить(
			ключ,
			ключ,
			Неопределено,
			""
	);
		
	настройки = СтруктураНастроек();
	Если ЗначениеЗаполнено(значение) Тогда
		ЗаполнитьЗначенияСвойств(настройки, значение);
	КонецЕсли;
		
	Возврат настройки;
КонецФункции

#КонецОбласти

#Область Проверки

Функция ЭтоУзелДляОбменаПоСобытиям(Узел) Экспорт
	настройки = Настройки();
	Возврат (настройки.Узлы.Получить(Узел) <> Undefined);
КонецФункции

#КонецОбласти

//Функция ТекстЗапросаВыброркиЗарегистрированныхНеОтправленныхИзменений(УзелДляОбмена) Экспорт
//	//TODO: Необходимо сгенерировать запрос по всем 
//	//зарегистрированным изменениям, у которых нет номера сообщения.
//	мета = УзелДляОбмена.Метаданные();
//	номерОтправленного = УзелДляОбмена.НомерОтправленного;							
//	схема = Новый СхемаЗапроса;								
//		
//	этоПервыйЗапрос = Истина;								
//	пакетЗапросов = схема.ПакетЗапросов[0];
//	операторы = пакетЗапросов.Операторы;
//	Для Каждого элт Из мета.Состав Цикл
//		оператор = Неопределено;
//		Если этоПервыйЗапрос Тогда
//			оператор = операторы[0];
//			этоПервыйЗапрос = Ложь;
//		Иначе
//			оператор = операторы.Добавить();
//		КонецЕсли;
//		
//		источник = оператор.Источники.Добавить(элт.Метаданные.ПолноеИмя()+".Изменения");	
//		псевдоним = элт.Метаданные.Имя;
//		источник.Источник.Псевдоним = псевдоним;
//		оператор.ВыбираемыеПоля.Очистить();
//		оператор.ВыбираемыеПоля.Добавить(СтрШаблон("МАКСИМУМ(isnull(%1.НомерСообщения, 0))", псевдоним));
//		//можно добавить контроль количества отправленных, но не подтвержденных сообщений:
//		//оператор.ВыбираемыеПоля.Добавить(СтрШаблон("МАКСИМУМ(isnull(%1.НомерСообщения, 0))", псевдоним));
//		оператор.Отбор.Добавить(СтрШаблон("%1.Узел = &Узел", псевдоним));
//	КонецЦикла;
//	пакетЗапросов.Колонки[0].Псевдоним = "НомерСообщения";
//	//можно добавить контроль количества отправленных, но не подтвержденных сообщений:
//	//пакетЗапросов.Колонки[1].Псевдоним = "НомерСообщенияКоличество"; 
//	
//	пакетЗапросов.ОбщиеИтоги = Истина;	
//	пакетЗапросов.ВыраженияИтогов.Добавить("МАКСИМУМ(isnull(НомерСообщения, 0))");
//	//можно добавить контроль количества отправленных, но не подтвержденных сообщений:
//	//пакетЗапросов.ВыраженияИтогов.Добавить("КОЛИЧЕСТВО(РАЗЛИЧНЫЕ isnull(НомерСообщенияКоличество, 0))");
//	
//	Возврат схема.ПолучитьТекстЗапроса();
//КонецФункции

Функция ЭтоМетаданныеСсылочногоТипаПовтИсп(ИмяОбъектаМетаданных) Экспорт
    Позиция = СтрНайти(ИмяОбъектаМетаданных, ".");
    Если Позиция > 0 Тогда 
        ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);    
        Возврат ИмяБазовогоТипа = "Справочник"
            Или ИмяБазовогоТипа = "Документ"
            Или ИмяБазовогоТипа = "БизнесПроцесс"
            Или ИмяБазовогоТипа = "Задача"
            Или ИмяБазовогоТипа = "ПланСчетов"
            Или ИмяБазовогоТипа = "ПланОбмена"
            Или ИмяБазовогоТипа = "ПланВидовХарактеристик"
            Или ИмяБазовогоТипа = "ПланВидовРасчета";
    Иначе
        Возврат Ложь;
    КонецЕсли;    
КонецФункции
