Процедура exch_ВыгрузитьОбъект(Объект, Получатель, НомерОтправленного) Экспорт
	имяСвойсваУзлыПолучателиСобытия = exch_ОбменДаннымиНастройки.ИмяСвойстваУзлыПолучателиСобытия();	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = exch_ОбменДаннымиНастройки.НаименованиеФоновогоЗаданияОтправкиДанных();
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДлительныеОперации.ВыполнитьВФоне(
		"ОбменДаннымиСервер.exch_ВыполнитьОтправкуОбъектаДляУзлаИнформационнойБазыВФоне",
		Новый Структура(			
			"Отказ,
			|УзелИнформационнойБазы,
			|ОбъектВыгрузки,
			|ВидТранспортаСообщенийОбмена,
			|ИмяОбработкиТранспортаСообщения,
			|ТолькоПараметры,
			|ДополнительныеПараметры,
			|НомерОтправленного",
			Ложь, 
			Получатель,
			Объект,				
			Неопределено, //Перечисления.ВидыТранспортаСообщенийОбмена.exch_HTTPRabbitMQ, 
			"exch_ТранспортСообщенийОбменаHTTPRabbitMQ",
			Ложь, 
			Неопределено,
			НомерОтправленного
		),
		ПараметрыВыполнения
	);		
	
КонецПроцедуры

// Выполняет отправку или получение данных для узла информационной базы используя любой из 
// доступных для плана обмена канал связи, кроме COM-соединения и web-сервиса.
//
// Параметры:
//  Отказ                        - Булево - флаг отказа, устанавливается в Истина в случае
//                                 не успешного выполнения процедуры.
//  УзелИнформационнойБазы       - УзелОбменаСсылка - ПланОбменаСсылка - узел плана обмена,
//                                 для которого выполняется действие обмена данными.
//  ДействиеПриОбмене            - ПеречислениеСсылка.ДействияПриОбмене - выполняемое действие обмена данными.
//  ВидТранспортаСообщенийОбмена - ПеречислениеСсылка.Перечисления.ВидыТранспортаСообщенийОбмена - вид транспорта,
//                                 который будет использоваться в процессе обмена данными. Если не указан, 
//                                 определяется из параметров транспорта, заданных для узла плана обмена при
//                                 настройке обмена. Необязательный, значение по умолчанию Неопределено.
//  ТолькоПараметры              - Булево - содержит признак выборочной загрузки данных при обмене РИБ.
//  ДополнительныеПараметры      - Структура - зарезервировано для служебного использования.
// 
Процедура exch_ВыполнитьОтправкуОбъектаДляУзлаИнформационнойБазыВФоне(Параметры, ПараметрыВыполнения) Экспорт
	
	Отказ					= Параметры.Отказ;
	УзелИнформационнойБазы 	= Параметры.УзелИнформационнойБазы;
	ОбъектВыгрузки			= Параметры.ОбъектВыгрузки;
	ВидТранспортаСообщенийОбмена = Параметры.ВидТранспортаСообщенийОбмена;
	ТолькоПараметры 		= Параметры.ТолькоПараметры;
	ДополнительныеПараметры = Параметры.ДополнительныеПараметры;
	НомерОтправленного 		= Параметры.НомерОтправленного;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	
	//не заполняем вид транспорта и не используем его типовые настройки
	СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.НастройкиОбменаУзлаИнформационнойБазы(
		УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных, Неопределено, Ложь);
		
	//подставляем обработку транспорта
	//и вид транспорта соответствующий событийному обмену
	//СтруктураНастроекОбмена.ВидТранспортаОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.exch_HTTPRabbitMQ;
	СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена = Обработки.exch_ТранспортСообщенийОбменаHTTPRabbitMQ.Создать();
	
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		
		// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из ДополнительныеПараметры Цикл
		СтруктураНастроекОбмена.ДополнительныеПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	// ОБМЕН ДАННЫМИ	
	exch_ВыполнитьОтправкуДанных(СтруктураНастроекОбмена, ОбъектВыгрузки, НомерОтправленного, ТолькоПараметры);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	Для Каждого Параметр Из СтруктураНастроекОбмена.ДополнительныеПараметры Цикл
		ДополнительныеПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		Параметры.Отказ = Истина;
		
		//в случае ошибки при отправке регистрируем изменение в плане обмена
		//что бы иметь возможность повторной отправки
		Если СтруктураНастроекОбмена.Свойство("exch_СтруктураРезультатаВыгрузки") 
			И СтруктураНастроекОбмена.exch_СтруктураРезультатаВыгрузки.Свойство("ВыгруженныеОбъекты")
			И ТипЗнч(СтруктураНастроекОбмена.exch_СтруктураРезультатаВыгрузки.ВыгруженныеОбъекты) = Тип("Массив")
		Тогда
			Для Каждого Элемент Из СтруктураНастроекОбмена.exch_СтруктураРезультатаВыгрузки.ВыгруженныеОбъекты Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, Элемент);		
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
	СтруктураНастроекОбмена.Вставить("exch_СтруктураРезультатаВыгрузки", Неопределено);
КонецПроцедуры

Процедура exch_ВыполнитьОтправкуДанных(СтруктураНастроекОбмена, ОбъектВыгрузки, НомерОтправленного, Знач ТолькоПараметры = Ложь)
	
	Если ОбъектВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
	
	// выгрузка данных
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		
		exch_ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ОбъектВыгрузки, НомерОтправленного);		
		
	КонецЕсли;
	
	// Отправка сообщения обмена только в случае успешной выгрузки данных.
	Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		ВыполнитьТранспортСообщенияОбменаОтправка(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);	
	
КонецПроцедуры

// Записывает изменения узла информационной базы в файл во временном каталоге.
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена.
// 
Процедура exch_ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ОбъектВыгрузки, НомерОтправленного);
	СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ДанныеСообщенияXML = Неопределено;
	
	// Универсальный обмен (обмен по правилам конвертации).
	Если СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда
		
		//ФормироватьСообщениеОбмена = ПустаяСтрока(ИмяФайлаСообщенияОбмена);
		//Если ФормироватьСообщениеОбмена Тогда
		//	ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла(".xml");
		//КонецЕсли;
		
		// Получаем инициализированную обработку обмена данными.
		ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		//ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаСообщенияОбмена;
		
		// выгрузка данных
		
		СтруктураРезультатаВыгрузки = ОбработкаОбменаДаннымиXML.exch_ВыполнитьВыгрузкуДанных(ОбъектВыгрузки, НомерОтправленного);		
		СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ДанныеСообщенияXML =	
			СтруктураРезультатаВыгрузки.ДанныеСообщенияXML;
		
		//Если ФормироватьСообщениеОбмена Тогда
		//	ТекстовыйФайл = Новый ТекстовыйДокумент;
		//	ТекстовыйФайл.Прочитать(ИмяФайлаСообщенияОбмена, КодировкаТекста.UTF8);
		//	СообщениеОбмена = ТекстовыйФайл.ПолучитьТекст();
		//	УдалитьФайлы(ИмяФайлаСообщенияОбмена);
		//КонецЕсли;
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
		
		// Фиксируем состояние выполнения обмена данными.
		СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикВыгруженныхОбъектов();
		СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриВыгрузкеДанных;
		СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();
		
		//если были проблемы при конвертации объекта, то будет сгенерировано пустое сообщение,
		//а не сконвертированные данные будут поставлены на регистрацию
		//но если ошибка произойдет при помешении сообщения в транспорт
		//необходимо перерегистрировать объект для повторной отправки
		//поэтому сохраняем структуру выгрузки, в которой хранятся выгруженные
		//в сообщение объекты.
		СтруктураНастроекОбмена.Вставить("exch_СтруктураРезультатаВыгрузки", СтруктураРезультатаВыгрузки);
		
	КонецЕсли;
		
	//КонецЕсли;
КонецПроцедуры

Функция exch_ТекстЗапросаВыброркиЗарегистрированныхНеОтправленныхИзменений(УзелДляОбмена) Экспорт
	мета = УзелДляОбмена.Метаданные();
	схема = Новый СхемаЗапроса;								
		
	этоПервыйЗапрос = Истина;								
	ПакетЗапросов	= схема.ПакетЗапросов;	
	Для Каждого элт Из мета.Состав Цикл		
		Запрос = Неопределено;
		Если этоПервыйЗапрос Тогда			
			Запрос = ПакетЗапросов[0];
		Иначе
			Запрос = ПакетЗапросов.Добавить();
		КонецЕсли;
		оператор = Запрос.Операторы[0];
		этоПервыйЗапрос = Ложь;
		
		источник = оператор.Источники.Добавить(элт.Метаданные.ПолноеИмя()+".Изменения");	
		псевдоним = элт.Метаданные.Имя;
		источник.Источник.Псевдоним = псевдоним;
		оператор.ВыбираемыеПоля.Очистить();
		оператор.ВыбираемыеПоля.Добавить(СтрШаблон("""%1""", элт.Метаданные.ПолноеИмя()));
		Если exch_ОбменДаннымиПроверки.ЭтоМетаданныеСсылочногоТипа(элт.Метаданные) Тогда
			оператор.ВыбираемыеПоля.Добавить(СтрШаблон("%1.Ссылка", псевдоним));
		Иначе
			Для Каждого Измерение Из элт.Метаданные.Измерения Цикл
				оператор.ВыбираемыеПоля.Добавить(СтрШаблон("%1.%2", псевдоним, Измерение.Имя));
			КонецЦикла;
		КонецЕсли;
		оператор.Отбор.Добавить(СтрШаблон("%1.НомерСообщения IS NULL", псевдоним));
		оператор.Отбор.Добавить(СтрШаблон("%1.Узел = &УзелДляОбмена", псевдоним));
		Запрос.Колонки[0].Псевдоним = "ТипОбъекта";
	КонецЦикла;
	
	Возврат схема.ПолучитьТекстЗапроса();
КонецФункции

Функция exch_ПакетЗарегистрированныхНоНеОтправленныхИзменения(УзелДляОбмена)
	  ТекстЗапроса = exch_ТекстЗапросаВыброркиЗарегистрированныхНеОтправленныхИзменений(УзелДляОбмена);
	  Запрос = новый Запрос(ТекстЗапроса);
	  Запрос.УстановитьПараметр("УзелДляОбмена", УзелДляОбмена);
	  
	  Возврат Запрос.ВыполнитьПакет();	  
КонецФункции

Функция exch_СтруктураОбъектаВыборкиПоРезультатуЗапроса(РезультатЗапроса)
	СтруктураОбъекта = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураОбъекта.Вставить(Колонка.Имя, Неопределено);
	КонецЦикла;
	
	Возврат СтруктураОбъекта;
КонецФункции

&Вместо("ВыполнитьОбменДаннымиЧерезФайловыйРесурс")
Процедура exch_ВыполнитьОбменДаннымиЧерезФайловыйРесурс(СтруктураНастроекОбмена, Знач ТолькоПараметры = Ложь)
	
	Если НЕ exch_ОбменДаннымиПроверки.ЭтоУзелДляОбменаПоСобытиям(СтруктураНастроекОбмена.УзелИнформационнойБазы) Тогда
		ПродолжитьВызов(СтруктураНастроекОбмена, ТолькоПараметры);
		Возврат;
	КонецЕсли;
	
	//Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		//обработка входящих сообщений при событийном обмене
		//должна очищать регистрацию только на конкретный номер сообщения,
		//а не как типовой обмен все сообщения номером меньше указанного в принятом
		//т.к. каждое сообщение соответствует конкретному объекту.
		
		//// {Обработчик: ПередЧтениемСообщенияОбмена} Начало
		//СообщениеОбмена = "";
		//СтандартнаяОбработка = Истина;
		//
		//ПередЧтениемСообщенияОбмена(СтруктураНастроекОбмена.УзелИнформационнойБазы, СообщениеОбмена, СтандартнаяОбработка);
		//// {Обработчик: ПередЧтениемСообщенияОбмена} Окончание
		//
		//Если СтандартнаяОбработка Тогда
		//	
		//	ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
		//	
		//	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		//		
		//		ВыполнитьТранспортСообщенияОбменаПолучение(СтруктураНастроекОбмена);
		//		
		//		Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		//			
		//			СообщениеОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена();
		//			
		//		КонецЕсли;
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;
		//
		//// Загрузка данных только при успешном получении сообщения обмена.
		//Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		//	
		//	ЕстьПоддержкаСопоставления = ЗначениеНастройкиПланаОбмена(
		//		ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(СтруктураНастроекОбмена.УзелИнформационнойБазы),
		//		"ПоддерживаетсяСопоставлениеДанных",
		//		СохраненныйВариантНастройкиУзлаПланаОбмена(СтруктураНастроекОбмена.УзелИнформационнойБазы));
		//	
		//	Если СтруктураНастроекОбмена.ДополнительныеПараметры.Свойство("СообщениеДляСопоставленияДанных")
		//		И (ЕстьПоддержкаСопоставления 
		//			Или Не НастройкаСинхронизацииЗавершена(СтруктураНастроекОбмена.УзелИнформационнойБазы)) Тогда
		//		
		//		ИмяФайлаДляПомещенияВХранилище = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
		//			КаталогВременногоХранилищаФайлов(),
		//			УникальноеИмяФайлаСообщенияОбмена());
		//			
		//		// Сохраняется новое сообщение для сопоставления данных.
		//		ИдентификаторФайла = ПоместитьФайлВХранилище(ИмяФайлаДляПомещенияВХранилище);
		//		ПереместитьФайл(СообщениеОбмена, ИмяФайлаДляПомещенияВХранилище);
		//		
		//		ОбменДаннымиСлужебный.ПоместитьСообщениеДляСопоставленияДанных(
		//			СтруктураНастроекОбмена.УзелИнформационнойБазы, ИдентификаторФайла);
		//		
		//		СтандартнаяОбработка = Истина;
		//	Иначе
		//		
		//		ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, СообщениеОбмена, , ТолькоПараметры);
		//		
		//		// {Обработчик: ПослеЧтенияСообщенияОбмена} Начало
		//		СтандартнаяОбработка = Истина;
		//		
		//		ПослеЧтенияСообщенияОбмена(
		//					СтруктураНастроекОбмена.УзелИнформационнойБазы,
		//					СообщениеОбмена,
		//					РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена),
		//					СтандартнаяОбработка,
		//					Не ТолькоПараметры);
		//		// {Обработчик: ПослеЧтенияСообщенияОбмена} Окончание
		//		
		//	КонецЕсли;
		//	
		//КонецЕсли;
		//
		//Если СтандартнаяОбработка Тогда
		//	
		//	ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
		//	
		//КонецЕсли;
		
	//Иначе
	Если СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		//выбираем все арегистрированные изменения по заданному узлу
		//генерим сообщения и отправляем их по каждому объекту
		//присваивая уникальный номер сообщения
		УзелДляОбмена = СтруктураНастроекОбмена.УзелИнформационнойБазы;		
		МаксимальноеКоличествоПотоков = exch_ОбменДаннымиНастройки.Настройки().КоличествоПотоковВыгрузки;
		ОтборФоновыхЗаданий = Новый Структура(
			"Наименование, Состояние", 
			exch_ОбменДаннымиНастройки.НаименованиеФоновогоЗаданияОтправкиДанных(),
			СостояниеФоновогоЗадания.Активно
		);
		
		ПакетИзменений = exch_ПакетЗарегистрированныхНоНеОтправленныхИзменения(УзелДляОбмена);		
		НомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелДляОбмена, "НомерОтправленного") + 1;
		Для Каждого Результат Из ПакетИзменений Цикл
			ОбъектВыгрузки = exch_СтруктураОбъектаВыборкиПоРезультатуЗапроса(Результат);
			ВыборкаИзменений = Результат.Выбрать();
			
			Пока ВыборкаИзменений.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбъектВыгрузки, ВыборкаИзменений);
				exch_ВыгрузитьОбъект(ОбъектВыгрузки, УзелДляОбмена, НомерОтправленного);
				
				ОбъектУзел 						 = УзелДляОбмена.ПолучитьОбъект();
				ОбъектУзел.НомерОТправленного 	 = НомерОтправленного;
				ОбъектУзел.ОбменДанными.Загрузка = Истина;
				ОбъектУзел.Записать();
					
				НомерОтправленного = НомерОтправленного+1;
				
				//ждем освобождение пула соединений				
				Пока ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхЗаданий).Количество() > МаксимальноеКоличествоПотоков
				Цикл
				КонецЦикла;
				
			КонецЦикла;	
		КонецЦикла;
		
		//ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
		//
		//// выгрузка данных
		//Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		//	
		//	ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена());
		//	
		//КонецЕсли;
		//
		//// Отправка сообщения обмена только в случае успешной выгрузки данных.
		//Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		//	
		//	ВыполнитьТранспортСообщенияОбменаОтправка(СтруктураНастроекОбмена);
		//	
		//КонецЕсли;
		//
		//ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
КонецПроцедуры
