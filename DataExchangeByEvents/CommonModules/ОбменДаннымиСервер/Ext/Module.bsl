#Область ОтправкаСообщений
Процедура exch_ВыгрузитьОбъект(Объект, Получатель, НомерОтправленного) Экспорт
	имяСвойсваУзлыПолучателиСобытия = exch_ОбменДаннымиНастройки.ИмяСвойстваУзлыПолучателиСобытия();	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = exch_ОбменДаннымиНастройки.НаименованиеФоновогоЗаданияОтправкиДанных();
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДлительныеОперации.ВыполнитьВФоне(
		"ОбменДаннымиСервер.exch_ВыполнитьОтправкуОбъектаДляУзлаИнформационнойБазыВФоне",
		Новый Структура(			
			"Отказ,
			|УзелИнформационнойБазы,
			|ОбъектВыгрузки,
			|ВидТранспортаСообщенийОбмена,
			|ИмяОбработкиТранспортаСообщения,
			|ТолькоПараметры,
			|ДополнительныеПараметры,
			|НомерОтправленного",
			Ложь, 
			Получатель,
			Объект,				
			Неопределено, //Перечисления.ВидыТранспортаСообщенийОбмена.exch_HTTPRabbitMQ, 
			"exch_ТранспортСообщенийОбменаHTTPRabbitMQ",
			Ложь, 
			Неопределено,
			НомерОтправленного
		),
		ПараметрыВыполнения
	);		
	
КонецПроцедуры

// Выполняет отправку или получение данных для узла информационной базы используя любой из 
// доступных для плана обмена канал связи, кроме COM-соединения и web-сервиса.
//
// Параметры:
//  Отказ                        - Булево - флаг отказа, устанавливается в Истина в случае
//                                 не успешного выполнения процедуры.
//  УзелИнформационнойБазы       - УзелОбменаСсылка - ПланОбменаСсылка - узел плана обмена,
//                                 для которого выполняется действие обмена данными.
//  ДействиеПриОбмене            - ПеречислениеСсылка.ДействияПриОбмене - выполняемое действие обмена данными.
//  ВидТранспортаСообщенийОбмена - ПеречислениеСсылка.Перечисления.ВидыТранспортаСообщенийОбмена - вид транспорта,
//                                 который будет использоваться в процессе обмена данными. Если не указан, 
//                                 определяется из параметров транспорта, заданных для узла плана обмена при
//                                 настройке обмена. Необязательный, значение по умолчанию Неопределено.
//  ТолькоПараметры              - Булево - содержит признак выборочной загрузки данных при обмене РИБ.
//  ДополнительныеПараметры      - Структура - зарезервировано для служебного использования.
// 
Процедура exch_ВыполнитьОтправкуОбъектаДляУзлаИнформационнойБазыВФоне(Параметры, ПараметрыВыполнения) Экспорт
	
	Отказ					= Параметры.Отказ;
	УзелИнформационнойБазы 	= Параметры.УзелИнформационнойБазы;
	ОбъектВыгрузки			= Параметры.ОбъектВыгрузки;
	ВидТранспортаСообщенийОбмена = Параметры.ВидТранспортаСообщенийОбмена;
	ТолькоПараметры 		= Параметры.ТолькоПараметры;
	ДополнительныеПараметры = Параметры.ДополнительныеПараметры;
	НомерОтправленного 		= Параметры.НомерОтправленного;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	
	//не заполняем вид транспорта и не используем его типовые настройки
	СтруктураНастроекОбмена = НастройкиОбменаДляУзлаИнформационнойБазы(
		УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных, Неопределено, Ложь);
		
	//подставляем обработку транспорта
	//и вид транспорта соответствующий событийному обмену
	//СтруктураНастроекОбмена.ВидТранспортаОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.exch_HTTPRabbitMQ;
	СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена = Обработки.exch_ТранспортСообщенийОбменаHTTPRabbitMQ.Создать();
	СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.Инициализация(
		СтруктураНастроекОбмена.УзелИнформационнойБазы
	);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		
		// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из ДополнительныеПараметры Цикл
		СтруктураНастроекОбмена.ДополнительныеПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	// ОБМЕН ДАННЫМИ	
	exch_ВыполнитьОтправкуДанных(СтруктураНастроекОбмена, ОбъектВыгрузки, НомерОтправленного, ТолькоПараметры);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	Для Каждого Параметр Из СтруктураНастроекОбмена.ДополнительныеПараметры Цикл
		ДополнительныеПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		Параметры.Отказ = Истина;
		
		//в случае ошибки при отправке регистрируем изменение в плане обмена
		//что бы иметь возможность повторной отправки
		Если СтруктураНастроекОбмена.Свойство("exch_СтруктураРезультатаВыгрузки") 
			И СтруктураНастроекОбмена.exch_СтруктураРезультатаВыгрузки.Свойство("ВыгруженныеОбъекты")
			И ТипЗнч(СтруктураНастроекОбмена.exch_СтруктураРезультатаВыгрузки.ВыгруженныеОбъекты) = Тип("Массив")
		Тогда
			Для Каждого Элемент Из СтруктураНастроекОбмена.exch_СтруктураРезультатаВыгрузки.ВыгруженныеОбъекты Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, Элемент);		
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
	СтруктураНастроекОбмена.Вставить("exch_СтруктураРезультатаВыгрузки", Неопределено);
КонецПроцедуры

Процедура exch_ВыполнитьОтправкуДанных(СтруктураНастроекОбмена, ОбъектВыгрузки, НомерОтправленного, Знач ТолькоПараметры = Ложь)
	
	Если ОбъектВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
	
	// выгрузка данных
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		
		exch_ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ОбъектВыгрузки, НомерОтправленного);		
		
	КонецЕсли;
	
	// Отправка сообщения обмена только в случае успешной выгрузки данных.
	Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		ВыполнитьТранспортСообщенияОбменаОтправка(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);	
	
КонецПроцедуры

// Записывает изменения узла информационной базы в файл во временном каталоге.
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена.
// 
Процедура exch_ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ОбъектВыгрузки, НомерОтправленного);
	СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ДанныеСообщенияXML = Неопределено;
	
	// Универсальный обмен (обмен по правилам конвертации).
	Если СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда
		
		//ФормироватьСообщениеОбмена = ПустаяСтрока(ИмяФайлаСообщенияОбмена);
		//Если ФормироватьСообщениеОбмена Тогда
		//	ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла(".xml");
		//КонецЕсли;
		
		// Получаем инициализированную обработку обмена данными.
		ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		//ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаСообщенияОбмена;
		
		// выгрузка данных
		
		СтруктураРезультатаВыгрузки = ОбработкаОбменаДаннымиXML.exch_ВыполнитьВыгрузкуДанных(ОбъектВыгрузки, НомерОтправленного);		
		СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ДанныеСообщенияXML =	
			СтруктураРезультатаВыгрузки.ДанныеСообщенияXML;
		
		//Если ФормироватьСообщениеОбмена Тогда
		//	ТекстовыйФайл = Новый ТекстовыйДокумент;
		//	ТекстовыйФайл.Прочитать(ИмяФайлаСообщенияОбмена, КодировкаТекста.UTF8);
		//	СообщениеОбмена = ТекстовыйФайл.ПолучитьТекст();
		//	УдалитьФайлы(ИмяФайлаСообщенияОбмена);
		//КонецЕсли;
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
		
		// Фиксируем состояние выполнения обмена данными.
		СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикВыгруженныхОбъектов();
		СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриВыгрузкеДанных;
		СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();
		
		//если были проблемы при конвертации объекта, то будет сгенерировано пустое сообщение,
		//а не сконвертированные данные будут поставлены на регистрацию
		//но если ошибка произойдет при помешении сообщения в транспорт
		//необходимо перерегистрировать объект для повторной отправки
		//поэтому сохраняем структуру выгрузки, в которой хранятся выгруженные
		//в сообщение объекты.
		СтруктураНастроекОбмена.Вставить("exch_СтруктураРезультатаВыгрузки", СтруктураРезультатаВыгрузки);
		
	КонецЕсли;
		
	//КонецЕсли;
КонецПроцедуры

#КонецОбласти
//ОтправкаСообщений

#Область ЧтениеСообщений
Функция exch_ЗагрузитьСообщение(Знач ДанныеСообщенияXML, Знач УзелОбмена) Экспорт
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = exch_ОбменДаннымиНастройки.НаименованиеФоновогоЗаданияЧтенияСообщений();
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	ДлительныеОперации.ВыполнитьВФоне(
		"ОбменДаннымиСервер.exch_ВыполнитьЧтениеСообщенияДляУзлаИнформационнойБазыВФоне",
		Новый Структура(			
			"Отказ,
			|УзелИнформационнойБазы,			
			|ДанныеСообщенияXML",
			Ложь, 
			УзелОбмена,
			ДанныеСообщенияXML
		),
		ПараметрыВыполнения
	);		
	
	Возврат Истина;
КонецФункции

// Получает сообщение обмена с новыми данными и загружает данные в информационную базу.
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена.
// 
Функция exch_ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, Знач ДанныеСообщенияXML, Знач ТолькоПараметры = Ложь)
	
	НомерПринятогоСообщения = Неопределено;
	
	Если СтруктураНастроекОбмена.ЭтоОбменВРИБ Тогда // Обмен в РИБ
		
		Отказ = Ложь;
		
		// Получаем обработку обмена данными.
		ОбработкаОбменаДанными = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		
		// Устанавливаем имя файла сообщения обмена, который необходимо прочитать.
		ОбработкаОбменаДанными.УстановитьИмяФайлаСообщенияОбмена("");
		
		ОбработкаОбменаДанными.ВыполнитьЗагрузкуДанных(Отказ, ТолькоПараметры);
		
		Если Отказ Тогда
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			
		КонецЕсли;
		
	Иначе
		
		СтандартнаяОбработка = Истина;
		КоличествоОбъектовОбработано = 0;
				
		// Универсальный обмен (обмен по правилам конвертации).
		Если СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда
			
			// Получаем инициализированную обработку обмена данными.
			ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
			ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = "";
			//ОбработкаОбменаДаннымиXML.УзелКорреспондента = СтруктураНастроекОбмена.УзелИнформационнойБазы;
			
			// загрузка данных
			НомерПринятогоСообщения = ОбработкаОбменаДаннымиXML.exch_ВыполнитьЗагрузкуДанных(ДанныеСообщенияXML);
			
			Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(СтруктураНастроекОбмена.ИмяПланаОбмена) Тогда
				ПолученыДанныеДляСопоставления = Ложь;
				Если Не ОбработкаОбменаДаннымиXML.КомпонентыОбмена.ФлагОшибки Тогда
					ПолученыДанныеДляСопоставления = (ОбработкаОбменаДаннымиXML.КомпонентыОбмена.НомерВходящегоСообщения > 0
						И ОбработкаОбменаДаннымиXML.КомпонентыОбмена.НомерСообщенияПолученногоКорреспондентом = 0);
				КонецЕсли;
				СтруктураНастроекОбмена.ДополнительныеПараметры.Вставить("ПолученыДанныеДляСопоставления", ПолученыДанныеДляСопоставления);
			КонецЕсли;
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
			
			// Фиксируем состояние выполнения обмена данными.
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикЗагруженныхОбъектов();
			СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриЗагрузкеДанных;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерПринятогоСообщения;
КонецФункции

Процедура exch_ВыполнитьЧтениеСообщенияДляУзлаИнформационнойБазыВФоне(Параметры, ПараметрыВыполнения) Экспорт
	УзелИнформационнойБазы = Параметры.УзелИнформационнойБазы;
	СообщениеОбмена = Параметры.ДанныеСообщенияXML;

	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	
	//не заполняем вид транспорта и не используем его типовые настройки
	СтруктураНастроекОбмена = НастройкиОбменаДляУзлаИнформационнойБазы(
		УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных, Неопределено, Ложь);
		
	//подставляем обработку транспорта
	//и вид транспорта соответствующий событийному обмену
	//СтруктураНастроекОбмена.ВидТранспортаОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.exch_HTTPRabbitMQ;
	СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена = Обработки.exch_ТранспортСообщенийОбменаHTTPRabbitMQ.Создать();
	СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.Инициализация(
		СтруктураНастроекОбмена.УзелИнформационнойБазы
	);
	
	НомерПринятогоСообщения = exch_ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, СообщениеОбмена);
	Если ЗначениеЗаполнено(НомерПринятогоСообщения) Тогда //отправляем квитанцию только если номер сообщения число > 0
		exch_ОтправитьКвитанцию(НомерПринятогоСообщения, УзелИнформационнойБазы);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
//ЧтениеСообщений

Процедура exch_ОтправитьКвитанцию(Знач НомерПринятогоСообщения, Знач УзелИнформационнойБазы)
	УстановитьПривилегированныйРежим(Истина);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	
	//не заполняем вид транспорта и не используем его типовые настройки
	СтруктураНастроекОбмена = НастройкиОбменаДляУзлаИнформационнойБазы(
		УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных, Неопределено, Ложь);
		
	//подставляем обработку транспорта
	//и вид транспорта соответствующий событийному обмену
	//СтруктураНастроекОбмена.ВидТранспортаОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.exch_HTTPRabbitMQ;
	СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена = Обработки.exch_ТранспортСообщенийОбменаHTTPRabbitMQ.Создать();
	СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.Инициализация(
			СтруктураНастроекОбмена.УзелИнформационнойБазы
	);
	
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		
		// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;
	
	ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
	
	// выгрузка данных
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		
		// Получаем инициализированную обработку обмена данными.
		ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		//ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаСообщенияОбмена;
		
		// выгрузка данных		
		КвитанцияXML = ОбработкаОбменаДаннымиXML.exch_СформироватьКвитанцию(НомерПринятогоСообщения);		
		СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ДанныеСообщенияXML =	КвитанцияXML;	
	КонецЕсли;
	
	// Отправка сообщения обмена только в случае успешной выгрузки данных.
	Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
		ВыполнитьТранспортСообщенияОбменаОтправка(СтруктураНастроекОбмена);
				
	КонецЕсли;
	
	//попытка подтверждения приема сообщения после обработки.
	//сходу не заработало, т.к. очередь сообщений была занята другим consumer
	//Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
	//	//удаляем сообщение из очереди
	//	СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИдПрочитанногоСообщения = ИдСообщенияMQ;
	//	Попытка
	//		СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.Инициализация(
	//			СтруктураНастроекОбмена.УзелИнформационнойБазы,
	//			Истина
	//		);
	//		СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ПодтвердитьПолучениеСообщения();
	//	Исключение
	//		//регисрируем ошибку подтверждения сообщения, но обмен не рушим
	//		ЗаписьЖурналаРегистрацииОбменаДанными(ОписаниеОшибки(), СтруктураНастроекОбмена, Истина);
	//	КонецПопытки;
	//КонецЕсли;	
	
	ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
	
КонецПроцедуры

&Вместо("ВыполнитьОбменДаннымиЧерезФайловыйРесурс")
Процедура exch_ВыполнитьОбменДаннымиЧерезФайловыйРесурс(СтруктураНастроекОбмена, Знач ТолькоПараметры = Ложь)
	
	Если НЕ exch_ОбменДаннымиПроверки.ЭтоУзелДляОбменаПоСобытиям(СтруктураНастроекОбмена.УзелИнформационнойБазы) Тогда
		ПродолжитьВызов(СтруктураНастроекОбмена, ТолькоПараметры);
		Возврат;
	КонецЕсли;
	
	Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		//обработка входящих сообщений при событийном обмене
		//должна очищать регистрацию только на конкретный номер сообщения,
		//а не как типовой обмен все сообщения номером меньше указанного в принятом
		//т.к. каждое сообщение соответствует конкретному объекту.
				
		//1.чтение сообщений ведем в один поток, а обработку в несколько			
		//	т.к.чтение сообщения требует значительно меньше времени чем обработка
		//  и однопоточное чтение позволяет контролировать наличие сообщений 
		// 	в очереди.
		//2.запускаем цикл чтения/подтверждения сообщений
		//3.каждое сообщение передаем в фоновую загрузку даных
		//4.в фоновой обработке в случае успешной загрузки 
		// 	формируем ответное сообщение с номером принятого
		//  это сообщение удаляет принятый объект из плана отправителя.
		//  По хорошему надо завести регистр сведений, в который писать
		//  номера не отправленных подтверждений приемки.
		//5.отправка сообщения по результатам фонового задания выполняется в 
		//  один поток в цикле контроля количества потоков обработки 
		//  входящих сообщений.
		
		//Подменяем типовую обработку на транспорт для событийного обмена
		СтруктураНастроекОбмена.ИмяОбработкиТранспортаСообщенийОбмена = "exch_ТранспортСообщенийОбменаHTTPRabbitMQ";
		ОбработкаТранспорта = Обработки.exch_ТранспортСообщенийОбменаHTTPRabbitMQ.Создать();
		ОбработкаТранспорта.Инициализация(
				СтруктураНастроекОбмена.УзелИнформационнойБазы,
				Истина
		);
		
		СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена = ОбработкаТранспорта;
		
		//подключаем компоненту
		ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
		МаксимальноеКоличествоПотоков = exch_ОбменДаннымиНастройки.Настройки().КоличествоПотоковВыгрузки;
		ОтборФоновыхЗаданий = Новый Структура(
			"Наименование, Состояние", 
			exch_ОбменДаннымиНастройки.НаименованиеФоновогоЗаданияЧтенияСообщений(),
			СостояниеФоновогоЗадания.Активно
		);
		
		Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда			
			ОчередьПуста = Ложь;
			Пока Не ОчередьПуста Цикл
				ВыполнитьТранспортСообщенияОбменаПолучение(СтруктураНастроекОбмена);					
				ОчередьПуста = ОбработкаТранспорта.ОчередьСообщенийПуста;
					
				Если Не ОчередьПуста 
					И СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено						
				Тогда
					
					НомерЗагруженногоСообщения = exch_ЗагрузитьСообщение(
						ОбработкаТранспорта.ДанныеСообщенияXML, 
						СтруктураНастроекОбмена.УзелИнформационнойБазы
					);
					
					//очищаем полученные данны, что бы компонента не кушала память
					//согласно рекомендациям https://github.com/BITERP/PinkRabbitMQ
					ОбработкаТранспорта.ДанныеСообщенияXML = Неопределено;
					
					//ждем освобождение пула соединений				
					Пока ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхЗаданий).Количество() > МаксимальноеКоличествоПотоков
					Цикл
					КонецЦикла;
						
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		//убиваем компоненту дабы освободить очередь из которой читаем
		ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
				
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		//выбираем все арегистрированные изменения по заданному узлу
		//генерим сообщения и отправляем их по каждому объекту
		//присваивая уникальный номер сообщения
		УзелДляОбмена = СтруктураНастроекОбмена.УзелИнформационнойБазы;		
		МаксимальноеКоличествоПотоков = exch_ОбменДаннымиНастройки.Настройки().КоличествоПотоковВыгрузки;
		ОтборФоновыхЗаданий = Новый Структура(
			"Наименование, Состояние", 
			exch_ОбменДаннымиНастройки.НаименованиеФоновогоЗаданияОтправкиДанных(),
			СостояниеФоновогоЗадания.Активно
		);
		
		ПакетИзменений = exch_ОбменДаннымиЗарегистрированныеИзменения.ПакетЗарегистрированныхИзменений(УзелДляОбмена);		
		НомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелДляОбмена, "НомерОтправленного") + 1;
		Для Каждого Результат Из ПакетИзменений Цикл
			ОбъектВыгрузки = exch_ОбменДаннымиЗарегистрированныеИзменения.СтруктураРегистрацииОбъекта(Результат);
			ВыборкаИзменений = Результат.Выбрать();
			
			Пока ВыборкаИзменений.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ОбъектВыгрузки, ВыборкаИзменений);
				exch_ВыгрузитьОбъект(ОбъектВыгрузки, УзелДляОбмена, НомерОтправленного);
				
				ОбъектУзел 						 = УзелДляОбмена.ПолучитьОбъект();
				ОбъектУзел.НомерОТправленного 	 = НомерОтправленного;
				ОбъектУзел.ОбменДанными.Загрузка = Истина;
				ОбъектУзел.Записать();
					
				НомерОтправленного = НомерОтправленного+1;
				
				//ждем освобождение пула соединений				
				Пока ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборФоновыхЗаданий).Количество() > МаксимальноеКоличествоПотоков
				Цикл
				КонецЦикла;
				
			КонецЦикла;	
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры
