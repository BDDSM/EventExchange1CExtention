Процедура exch_ВыгрузитьОбъект(Источник, Отказ) Экспорт
	имяСвойсваУзлыПолучателиСобытия = exch_ОбменДаннымиНастройки.ИмяСвойстваУзлыПолучателиСобытия();
	узлыПолучатели = Источник.ДополнительныеСвойства[имяСвойсваУзлыПолучателиСобытия];
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = "ОтправкаСообщенияПоСобытию";
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	Для Каждого узел Из узлыПолучатели Цикл
		//ОбменДаннымиСервер.exch_ВыполнитьОтправкуОбъектаДляУзлаИнформационнойБазыВФоне(
		//	Новый Структура(			
		//		"Отказ,
		//		|УзелИнформационнойБазы,
		//		|ОбъектВыгрузки,
		//		|ВидТранспортаСообщенийОбмена,
		//		|ИмяОбработкиТранспортаСообщения,
		//		|ТолькоПараметры,
		//		|ДополнительныеПараметры",
		//		Отказ, 
		//		узел,
		//		Источник,				
		//		Неопределено, //Перечисления.ВидыТранспортаСообщенийОбмена.exch_HTTPRabbitMQ, 
		//		"exch_ТранспортСообщенийОбменаHTTPRabbitMQ",
		//		Ложь, 
		//		Неопределено
		//	),
		//	ПараметрыВыполнения
		//);
		
		ДлительныеОперации.ВыполнитьВФоне(
			"ОбменДаннымиСервер.exch_ВыполнитьОтправкуОбъектаДляУзлаИнформационнойБазыВФоне",
			Новый Структура(			
				"Отказ,
				|УзелИнформационнойБазы,
				|ОбъектВыгрузки,
				|ВидТранспортаСообщенийОбмена,
				|ИмяОбработкиТранспортаСообщения,
				|ТолькоПараметры,
				|ДополнительныеПараметры",
				Отказ, 
				узел,
				Источник.Ссылка,				
				Неопределено, //Перечисления.ВидыТранспортаСообщенийОбмена.exch_HTTPRabbitMQ, 
				"exch_ТранспортСообщенийОбменаHTTPRabbitMQ",
				Ложь, 
				Неопределено
			),
			ПараметрыВыполнения
		);		
	КонецЦикла;
КонецПроцедуры

// Выполняет отправку или получение данных для узла информационной базы используя любой из 
// доступных для плана обмена канал связи, кроме COM-соединения и web-сервиса.
//
// Параметры:
//  Отказ                        - Булево - флаг отказа, устанавливается в Истина в случае
//                                 не успешного выполнения процедуры.
//  УзелИнформационнойБазы       - УзелОбменаСсылка - ПланОбменаСсылка - узел плана обмена,
//                                 для которого выполняется действие обмена данными.
//  ДействиеПриОбмене            - ПеречислениеСсылка.ДействияПриОбмене - выполняемое действие обмена данными.
//  ВидТранспортаСообщенийОбмена - ПеречислениеСсылка.Перечисления.ВидыТранспортаСообщенийОбмена - вид транспорта,
//                                 который будет использоваться в процессе обмена данными. Если не указан, 
//                                 определяется из параметров транспорта, заданных для узла плана обмена при
//                                 настройке обмена. Необязательный, значение по умолчанию Неопределено.
//  ТолькоПараметры              - Булево - содержит признак выборочной загрузки данных при обмене РИБ.
//  ДополнительныеПараметры      - Структура - зарезервировано для служебного использования.
// 
Процедура exch_ВыполнитьОтправкуОбъектаДляУзлаИнформационнойБазыВФоне(Параметры, ПараметрыВыполнения) Экспорт
	
	Отказ					= Параметры.Отказ;
	УзелИнформационнойБазы 	= Параметры.УзелИнформационнойБазы;
	ОбъектВыгрузки			= Параметры.ОбъектВыгрузки;
	ВидТранспортаСообщенийОбмена = Параметры.ВидТранспортаСообщенийОбмена;
	ТолькоПараметры 		= Параметры.ТолькоПараметры;
	ДополнительныеПараметры = Параметры.ДополнительныеПараметры;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	
	//не заполняем вид транспорта и не используем его типовые настройки
	СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.НастройкиОбменаУзлаИнформационнойБазы(
		УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных, Неопределено, Ложь);
		
	//подставляем обработку транспорта
	//и вид транспорта соответствующий событийному обмену
	//СтруктураНастроекОбмена.ВидТранспортаОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.exch_HTTPRabbitMQ;
	СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена = Обработки.exch_ТранспортСообщенийОбменаHTTPRabbitMQ.Создать();
	
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		
		// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из ДополнительныеПараметры Цикл
		СтруктураНастроекОбмена.ДополнительныеПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	// ОБМЕН ДАННЫМИ	
	exch_ВыполнитьОтправкуДанных(СтруктураНастроекОбмена, ТолькоПараметры, ОбъектВыгрузки);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	Для Каждого Параметр Из СтруктураНастроекОбмена.ДополнительныеПараметры Цикл
		ДополнительныеПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		Параметры.Отказ = Истина;
	Иначе
		//при успешной отправке сообщения за его доставку отвечает
		//транспорт. Поэтому регистрацию на узле удаляем
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелИнформационнойБазы, ОбъектВыгрузки);		
	КонецЕсли;	
	
КонецПроцедуры



Процедура exch_ВыполнитьОтправкуДанных(СтруктураНастроекОбмена, Знач ТолькоПараметры = Ложь, ОбъектВыгрузки = Неопределено)
	
	Если ОбъектВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
	
	// выгрузка данных
	Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
		
		exch_ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ОбъектВыгрузки);		
		
	КонецЕсли;
	
	// Отправка сообщения обмена только в случае успешной выгрузки данных.
	Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		ВыполнитьТранспортСообщенияОбменаОтправка(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
	ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);	
	
КонецПроцедуры

// Записывает изменения узла информационной базы в файл во временном каталоге.
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена.
// 
Процедура exch_ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ОбъектВыгрузки);
	СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ДанныеСообщенияXML = Неопределено;
	
	// Универсальный обмен (обмен по правилам конвертации).
	Если СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда
		
		//ФормироватьСообщениеОбмена = ПустаяСтрока(ИмяФайлаСообщенияОбмена);
		//Если ФормироватьСообщениеОбмена Тогда
		//	ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла(".xml");
		//КонецЕсли;
		
		// Получаем инициализированную обработку обмена данными.
		ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		//ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаСообщенияОбмена;
		
		// выгрузка данных
		СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ДанныеСообщенияXML =
			ОбработкаОбменаДаннымиXML.exch_ВыполнитьВыгрузкуДанных(ОбъектВыгрузки);		
		
		//Если ФормироватьСообщениеОбмена Тогда
		//	ТекстовыйФайл = Новый ТекстовыйДокумент;
		//	ТекстовыйФайл.Прочитать(ИмяФайлаСообщенияОбмена, КодировкаТекста.UTF8);
		//	СообщениеОбмена = ТекстовыйФайл.ПолучитьТекст();
		//	УдалитьФайлы(ИмяФайлаСообщенияОбмена);
		//КонецЕсли;
		
		СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
		
		// Фиксируем состояние выполнения обмена данными.
		СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикВыгруженныхОбъектов();
		СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриВыгрузкеДанных;
		СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();
		
	КонецЕсли;
		
	//КонецЕсли;
КонецПроцедуры

