//ВыполнитьТранспортСообщенияОбменаОтправка
//в этой процедуре выполняется отправка сообщения

//в обработку выгрузки файла добавить запись Message c указанным номеров сообщения в качестве постфикса
//для файлов с атомарной выгрузкой.

// Выполняет отправку или получение данных для узла информационной базы используя любой из 
// доступных для плана обмена канал связи, кроме COM-соединения и web-сервиса.
//
// Параметры:
//  Отказ                        - Булево - флаг отказа, устанавливается в Истина в случае
//                                 не успешного выполнения процедуры.
//  УзелИнформационнойБазы       - УзелОбменаСсылка - ПланОбменаСсылка - узел плана обмена,
//                                 для которого выполняется действие обмена данными.
//  ДействиеПриОбмене            - ПеречислениеСсылка.ДействияПриОбмене - выполняемое действие обмена данными.
//  ВидТранспортаСообщенийОбмена - ПеречислениеСсылка.Перечисления.ВидыТранспортаСообщенийОбмена - вид транспорта,
//                                 который будет использоваться в процессе обмена данными. Если не указан, 
//                                 определяется из параметров транспорта, заданных для узла плана обмена при
//                                 настройке обмена. Необязательный, значение по умолчанию Неопределено.
//  ТолькоПараметры              - Булево - содержит признак выборочной загрузки данных при обмене РИБ.
//  ДополнительныеПараметры      - Структура - зарезервировано для служебного использования.
// 
Процедура exch_ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(
		Отказ,
		УзелИнформационнойБазы,
		ДействиеПриОбмене,
		ВидТранспортаСообщенийОбмена = Неопределено,
		Знач ТолькоПараметры = Ложь,
		ДополнительныеПараметры = Неопределено) Экспорт
		
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	// ИНИЦИАЛИЗАЦИЯ ОБМЕНА ДАННЫМИ
	СтруктураНастроекОбмена = ОбменДаннымиПовтИсп.НастройкиОбменаУзлаИнформационнойБазы(
		УзелИнформационнойБазы, ДействиеПриОбмене, ВидТранспортаСообщенийОбмена);
	
	Если СтруктураНастроекОбмена.Отказ Тогда
		
		// Если настройка содержит ошибки, то обмен не производим; статус "Отменено".
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
		
		Отказ = Истина;
		
		Возврат;
	КонецЕсли;
	
	Для Каждого Параметр Из ДополнительныеПараметры Цикл
		СтруктураНастроекОбмена.ДополнительныеПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено;
	СтруктураНастроекОбмена.ДатаНачала = ТекущаяДатаСеанса();
	
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла %1'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтруктураНастроекОбмена.УзелИнформационнойБазыНаименование);
	ЗаписьЖурналаРегистрацииОбменаДанными(СтрокаСообщения, СтруктураНастроекОбмена);
	
	// ОБМЕН ДАННЫМИ
	exch_ВыполнитьОбменДаннымиЧерезФайловыйРесурс(СтруктураНастроекОбмена, ТолькоПараметры, ДополнительныеПараметры.ОбъектВыгрузки);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбмена);
	
	Для Каждого Параметр Из СтруктураНастроекОбмена.ДополнительныеПараметры Цикл
		ДополнительныеПараметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Если Не РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура exch_ВыполнитьОбменДаннымиЧерезФайловыйРесурс(СтруктураНастроекОбмена, Знач ТолькоПараметры = Ложь, ОбъектВыгрузки = Неопределено)
	
	Если ОбъектВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураНастроекОбмена.ПроизводитьЗагрузкуДанных Тогда
		
		// {Обработчик: ПередЧтениемСообщенияОбмена} Начало
		СообщениеОбмена = "";
		СтандартнаяОбработка = Истина;
		
		ПередЧтениемСообщенияОбмена(СтруктураНастроекОбмена.УзелИнформационнойБазы, СообщениеОбмена, СтандартнаяОбработка);
		// {Обработчик: ПередЧтениемСообщенияОбмена} Окончание
		
		Если СтандартнаяОбработка Тогда
			
			ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
			
			Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
				
				ВыполнитьТранспортСообщенияОбменаПолучение(СтруктураНастроекОбмена);
				
				Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
					
					СообщениеОбмена = СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Загрузка данных только при успешном получении сообщения обмена.
		Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
			
			ЕстьПоддержкаСопоставления = ЗначениеНастройкиПланаОбмена(
				ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(СтруктураНастроекОбмена.УзелИнформационнойБазы),
				"ПоддерживаетсяСопоставлениеДанных",
				СохраненныйВариантНастройкиУзлаПланаОбмена(СтруктураНастроекОбмена.УзелИнформационнойБазы));
			
			Если СтруктураНастроекОбмена.ДополнительныеПараметры.Свойство("СообщениеДляСопоставленияДанных")
				И (ЕстьПоддержкаСопоставления 
					Или Не НастройкаСинхронизацииЗавершена(СтруктураНастроекОбмена.УзелИнформационнойБазы)) Тогда
				
				ИмяФайлаДляПомещенияВХранилище = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
					КаталогВременногоХранилищаФайлов(),
					УникальноеИмяФайлаСообщенияОбмена());
					
				// Сохраняется новое сообщение для сопоставления данных.
				ИдентификаторФайла = ПоместитьФайлВХранилище(ИмяФайлаДляПомещенияВХранилище);
				ПереместитьФайл(СообщениеОбмена, ИмяФайлаДляПомещенияВХранилище);
				
				ОбменДаннымиСлужебный.ПоместитьСообщениеДляСопоставленияДанных(
					СтруктураНастроекОбмена.УзелИнформационнойБазы, ИдентификаторФайла);
				
				СтандартнаяОбработка = Истина;
			Иначе
				
				ПрочитатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, СообщениеОбмена, , ТолькоПараметры);
				
				// {Обработчик: ПослеЧтенияСообщенияОбмена} Начало
				СтандартнаяОбработка = Истина;
				
				ПослеЧтенияСообщенияОбмена(
							СтруктураНастроекОбмена.УзелИнформационнойБазы,
							СообщениеОбмена,
							РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена),
							СтандартнаяОбработка,
							Не ТолькоПараметры);
				// {Обработчик: ПослеЧтенияСообщенияОбмена} Окончание
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтандартнаяОбработка Тогда
			
			ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
	ИначеЕсли СтруктураНастроекОбмена.ПроизводитьВыгрузкуДанных Тогда
		
		ВыполнитьТранспортСообщенияОбменаПередОбработкой(СтруктураНастроекОбмена);
		
		// выгрузка данных
		Если СтруктураНастроекОбмена.РезультатВыполненияОбмена = Неопределено Тогда
			
			exch_ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ОбъектВыгрузки, СтруктураНастроекОбмена.ОбработкаТранспортаСообщенийОбмена.ИмяФайлаСообщенияОбмена());
			
		КонецЕсли;
		
		// Отправка сообщения обмена только в случае успешной выгрузки данных.
		Если РезультатВыполненияОбменаВыполнено(СтруктураНастроекОбмена.РезультатВыполненияОбмена) Тогда
			
			ВыполнитьТранспортСообщенияОбменаОтправка(СтруктураНастроекОбмена);
			
		КонецЕсли;
		
		ВыполнитьТранспортСообщенияОбменаПослеОбработки(СтруктураНастроекОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает изменения узла информационной базы в файл во временном каталоге.
//
// Параметры:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена.
// 
Процедура exch_ЗаписатьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбмена, ОбъектВыгрузки, Знач ИмяФайлаСообщенияОбмена = "", СообщениеОбмена = "")
	
	Если СтруктураНастроекОбмена.ЭтоОбменВРИБ Тогда // Обмен в РИБ
		
		Отказ = Ложь;
		СообщениеОбОшибке = "";
		
		// Получаем обработку обмена данными.
		ОбработкаОбменаДанными = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
		
		// Устанавливаем имя файла сообщения обмена, который необходимо прочитать.
		ОбработкаОбменаДанными.УстановитьИмяФайлаСообщенияОбмена(ИмяФайлаСообщенияОбмена);
		
		ОбработкаОбменаДанными.ВыполнитьВыгрузкуДанных(Отказ, СообщениеОбОшибке);
		
		Если Отказ Тогда
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке = СообщениеОбОшибке;
			
		КонецЕсли;
		
	Иначе
		
		// {Обработчик: ПриВыгрузкеДанных} Начало. Переопределение стандартной обработки выгрузки данных.
		СтандартнаяОбработка = Истина;
		КоличествоОбъектовОбработано = 0;
		
		Попытка
			ОбработчикПриВыгрузкеДанныхБСП(СтандартнаяОбработка,
											СтруктураНастроекОбмена.УзелИнформационнойБазы,
											ИмяФайлаСообщенияОбмена,
											СообщениеОбмена,
											СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
											СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
											КоличествоОбъектовОбработано);
			
			Если СтандартнаяОбработка = Истина Тогда
				
				КоличествоОбъектовОбработано = 0;
				
				ОбработчикПриВыгрузкеДанных(СтандартнаяОбработка,
												СтруктураНастроекОбмена.УзелИнформационнойБазы,
												ИмяФайлаСообщенияОбмена,
												СообщениеОбмена,
												СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
												СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
												КоличествоОбъектовОбработано);
				
			КонецЕсли;
			
		Исключение
			
			СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,
					СтруктураНастроекОбмена.УзелИнформационнойБазы.Метаданные(), 
					СтруктураНастроекОбмена.УзелИнформационнойБазы, СтрокаСообщенияОбОшибке);
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке = СтрокаСообщенияОбОшибке;
			Возврат;
		КонецПопытки;
		
		Если СтандартнаяОбработка = Ложь Тогда
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = КоличествоОбъектовОбработано;
			Возврат;
		КонецЕсли;
		// {Обработчик: ПриВыгрузкеДанных} Окончание
		
		// Универсальный обмен (обмен по правилам конвертации).
		Если СтруктураНастроекОбмена.ОбменПоПравиламКонвертацииОбъектов Тогда
			
			ФормироватьСообщениеОбмена = ПустаяСтрока(ИмяФайлаСообщенияОбмена);
			Если ФормироватьСообщениеОбмена Тогда
				ИмяФайлаСообщенияОбмена = ПолучитьИмяВременногоФайла(".xml");
			КонецЕсли;
			
			// Получаем инициализированную обработку обмена данными.
			ОбработкаОбменаДаннымиXML = СтруктураНастроекОбмена.ОбработкаОбменаДанными;
			ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаСообщенияОбмена;
			
			// выгрузка данных
			ОбработкаОбменаДаннымиXML.exch_ВыполнитьВыгрузкуДанных(ОбъектВыгрузки);
			
			Если ФормироватьСообщениеОбмена Тогда
				ТекстовыйФайл = Новый ТекстовыйДокумент;
				ТекстовыйФайл.Прочитать(ИмяФайлаСообщенияОбмена, КодировкаТекста.UTF8);
				СообщениеОбмена = ТекстовыйФайл.ПолучитьТекст();
				УдалитьФайлы(ИмяФайлаСообщенияОбмена);
			КонецЕсли;
			
			СтруктураНастроекОбмена.РезультатВыполненияОбмена = ОбработкаОбменаДаннымиXML.РезультатВыполненияОбмена();
			
			// Фиксируем состояние выполнения обмена данными.
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = ОбработкаОбменаДаннымиXML.СчетчикВыгруженныхОбъектов();
			СтруктураНастроекОбмена.СообщениеПриОбмене           = ОбработкаОбменаДаннымиXML.КомментарийПриВыгрузкеДанных;
			СтруктураНастроекОбмена.СтрокаСообщенияОбОшибке      = ОбработкаОбменаДаннымиXML.СтрокаСообщенияОбОшибке();
			
		Иначе // Стандартный обмен (платформенная сериализация).
			
			Отказ = Ложь;
			КоличествоОбъектовОбработано = 0;
			
			ВыполнитьСтандартнуюВыгрузкуИзмененийДляУзла(Отказ,
								СтруктураНастроекОбмена.УзелИнформационнойБазы,
								ИмяФайлаСообщенияОбмена,
								СообщениеОбмена,
								СтруктураНастроекОбмена.КоличествоЭлементовВТранзакции,
								СтруктураНастроекОбмена.КлючСообщенияЖурналаРегистрации,
								КоличествоОбъектовОбработано);
			
			СтруктураНастроекОбмена.КоличествоОбъектовОбработано = КоличествоОбъектовОбработано;
			
			Если Отказ Тогда
				
				СтруктураНастроекОбмена.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


