#Область ОбработчикиСобытийДляУниверсальногоОбмена_СИМ

&После("СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписью_СИМ")
// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) 
// для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
// Для отправки сообщения по событию записи объекта проверяем наличие узлов получателей
// и назначаем соответствующий обработчик
Процедура exch_СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписью_СИМ(Источник, Отказ) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НазначитьОбработчикОтправкиДанныхПоСобытию(Источник, "ПриЗаписи", "СинхронизацияДанныхЧерезУниверсальныйФорматПриЗаписи");
КонецПроцедуры

&После("СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписьюДокумента_СИМ")
// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - ДокументОбъект - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
// Для отправки сообщения по событию записи объекта проверяем наличие узлов получателей
// и назначаем соответствующий обработчик
Процедура exch_СинхронизацияДанныхЧерезУниверсальныйФорматПередЗаписьюДокумента_СИМ(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НазначитьОбработчикОтправкиДанныхПоСобытию(Источник, "ПриЗаписи", "СинхронизацияДанныхЧерезУниверсальныйФорматПриЗаписиДокумента");	
КонецПроцедуры

&После("СинхронизацияДанныхЧерезУниверсальныйФормат0ПередЗаписьюРегистра_СИМ")
// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - НаборЗаписейРегистра - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//  Замещение      - Булево - признак замещения существующего набора записей
// 
// Для отправки сообщения по событию записи объекта проверяем наличие узлов получателей
// и назначаем соответствующий обработчик
Процедура exch_СинхронизацияДанныхЧерезУниверсальныйФормат0ПередЗаписьюРегистра_СИМ(Источник, Отказ, Замещение) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НазначитьОбработчикОтправкиДанныхПоСобытию(Источник, "ПриЗаписи", "СинхронизацияДанныхЧерезУниверсальныйФормат0ПриЗаписиРегистра");	
КонецПроцедуры

&После("СинхронизацияДанныхЧерезУниверсальныйФорматПередУдалением_СИМ")
// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
// Для отправки сообщения по событию записи объекта проверяем наличие узлов получателей
// и назначаем соответствующий обработчик 
Процедура exch_СинхронизацияДанныхЧерезУниверсальныйФорматПередУдалением_СИМ(Источник, Отказ) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НазначитьОбработчикОтправкиДанныхПоСобытию(Источник, "ПередУдалением", "СинхронизацияДанныхЧерезУниверсальныйФорматПередУдалением");	
КонецПроцедуры

#КонецОбласти

Процедура НазначитьОбработчикОтправкиДанныхПоСобытию(Источник, ИмяСобытия, ИмяОбработчика)
	получателиСобытия = exch_ОбменДаннымиПроверки.ПолучателиСообщенияСОбъектом(Источник.ОбменДанными.Получатели);
	Если получателиСобытия.Количество() > 0 Тогда		
		Источник.ДополнительныеСвойства.Вставить(exch_ОбменДаннымиНастройки.ИмяСвойстваУзлыПоллчателиСобытия(), получателиСобытия);
		обработка = Обработки.exch_НазначаемыеОбработчики.Создать();
		Выполнить(СтрШаблон("ДобавитьОбработчик Источник.%1, обработка.%2",ИмяСобытия,ИмяОбработчика));
	КонецЕсли;
КонецПроцедуры

