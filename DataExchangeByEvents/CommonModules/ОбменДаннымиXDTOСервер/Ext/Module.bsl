// Открывает файл выгрузки данных, записывает заголовок файла в соответствие с форматом обмена.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  ИмяФайлаОбмена - строка - имя файла обмена.
//
Процедура exch_ОткрытьФайлВыгрузки(КомпонентыОбмена) Экспорт

	Если Не КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		ВызватьИсключение "Событийный обмен данными возможен только для узлов плана обмена.";
	КонецЕсли;
	
	ФайлОбмена = Новый ЗаписьXML;
	ФайлОбмена.УстановитьСтроку();
	ФайлОбмена.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = Неопределено;	

	ЗаписьСообщения = Новый Структура("НомерПринятого, НомерСообщения, Получатель");
	ЗаписьСообщения.Получатель = КомпонентыОбмена.УзелКорреспондента;
	
	//не блокируем редактирование, т.к. обмен идет по событиям, то номер отправленного 
	//сообщения является просто идентификатором и предпочтительней было бы использовать 
	//например GUID
	
	// Устанавливаем блокировку на узел получателя.
	//Попытка
	//	ЗаблокироватьДанныеДляРедактирования(ЗаписьСообщения.Получатель);
	//Исключение
	//	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru = 'Ошибка установки блокировки на обмен данными.
	//		|Возможно, обмен данными выполняется другим сеансом.
	//		|
	//		|Подробности:
	//		|%1'"),
	//		КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	//КонецПопытки;
	
	ДанныеПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаписьСообщения.Получатель, "НомерОтправленного, НомерПринятого, Код");
	
	//ЗаписьСообщения.НомерСообщения = ДанныеПолучателя.НомерОтправленного + 1;
	//т.к. сообщению нужен номер для обработки на стороне приемника
	//записываем в него текущее значение милисекунд последние
	//12 знаков	
	ЗаписьСообщения.НомерСообщения = Число(Прав(XMLСтрока(ТекущаяУниверсальнаяДатаВМиллисекундах()),12));
	ЗаписьСообщения.НомерПринятого = ДанныеПолучателя.НомерПринятого;
	
	ПараметрыЗаголовка = ПараметрыЗаголовкаСообщенияОбмена();
	
	ПараметрыЗаголовка.ФорматОбмена            = КомпонентыОбмена.XMLСхема;
	ПараметрыЗаголовка.ЭтоОбменЧерезПланОбмена = КомпонентыОбмена.ЭтоОбменЧерезПланОбмена;
	ПараметрыЗаголовка.ВерсияФорматаОбмена     = КомпонентыОбмена.ВерсияФорматаОбмена;
	
	ПараметрыЗаголовка.ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(КомпонентыОбмена.УзелКорреспондента);
	ПараметрыЗаголовка.ПсевдонимПредопределенногоУзла = ОбменДаннымиСервер.ПсевдонимПредопределенногоУзла(КомпонентыОбмена.УзелКорреспондента);
	
	ПараметрыЗаголовка.ИдентификаторПолучателя  = ОбменДаннымиСервер.ИдентификаторУзлаКорреспондентаДляОбмена(КомпонентыОбмена.УзелКорреспондента);
	ПараметрыЗаголовка.ИдентификаторОтправителя = ОбменДаннымиСервер.ИдентификаторЭтогоУзлаДляОбмена(КомпонентыОбмена.УзелКорреспондента);
		
	Если Не КомпонентыОбмена.ТолькоНастройкиXDTO Тогда
		ПараметрыЗаголовка.НомерСообщения = ЗаписьСообщения.НомерСообщения;
		ПараметрыЗаголовка.НомерПринятого = ЗаписьСообщения.НомерПринятого;
	КонецЕсли;
	
	ПараметрыЗаголовка.ПоддерживаемыеВерсии  = КомпонентыОбмена.НастройкиXDTO.ПоддерживаемыеВерсии;
	ПараметрыЗаголовка.ПоддерживаемыеОбъекты = КомпонентыОбмена.НастройкиXDTO.ПоддерживаемыеОбъекты;
	
	ПараметрыЗаголовка.Префикс = ОбменДаннымиСервер.ПрефиксИнформационнойБазы();
	
	ПараметрыЗаголовка.УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;

	
	ЗаписатьЗаголовокСообщенияОбмена(ФайлОбмена, ПараметрыЗаголовка);
	
	Если Не КомпонентыОбмена.ТолькоНастройкиXDTO Тогда
		// Записываем элемент <Body>
		ФайлОбмена.ЗаписатьНачалоЭлемента("Body");
		ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("", КомпонентыОбмена.XMLСхема);
	КонецЕсли;
	
	КомпонентыОбмена.Вставить("ФайлОбмена", ФайлОбмена);
	
КонецПроцедуры

// Выполняет выгрузку данных в соответствии с правилами и параметрами обмена.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//
Процедура exch_ПроизвестиВыгрузкуДанных(КомпонентыОбмена) Экспорт
	
	Если НЕ КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		Возврат;
	КонецЕсли;

	УзелДляОбмена = КомпонентыОбмена.УзелКорреспондента;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		ОчиститьСписокОшибокПриВыгрузкеДанных(УзелДляОбмена);
	КонецЕсли;
	
	Попытка
		КомпонентыОбмена.МенеджерОбмена.ПередКонвертацией(КомпонентыОбмена);
	Исключение
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Направление: %1.
			|Обработчик: ПередКонвертацией.
			|
			|Ошибка выполнения обработчика.
			|%2.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	НомерОтправленного = 0;
	НомерОтправленного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелДляОбмена, "НомерОтправленного") + 1;
	exch_ВыполнитьВыгрузкуЗарегистрированныхДанных(КомпонентыОбмена, НомерОтправленного);
	
	Если КомпонентыОбмена.ФлагОшибки Тогда
		ВызватьИсключение НСтр("ru = 'При формировании сообщения обмена данными произошли ошибки. Подробнее см. в журнале регистрации.'");
	КонецЕсли;
	
	Попытка
		КомпонентыОбмена.МенеджерОбмена.ПослеКонвертации(КомпонентыОбмена);
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Событие: %1.
				|Обработчик: ПослеКонвертации.
				|
				|Ошибка выполнения обработчика.
				|%2.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		
		// Сбрасываем номер отправленного сообщения у не выгруженных объектов.
		Если КомпонентыОбмена.ПропускатьОбъектыСОшибкамиПроверкиПоСхеме Тогда
			Для Каждого ОбъектСсылка Из КомпонентыОбмена.НеВыгруженныеОбъекты Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелДляОбмена, ОбъектСсылка);
			КонецЦикла;
		КонецЕсли;
		
		// Назначаем номер отправленного сообщения для объектов, выгруженных по ссылке.
		Если КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты.Количество() > 0 Тогда
			// Выполняем регистрацию объектов на текущем узле, которые были выгружены по ссылке.
			Для Каждого Элемент Из КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелДляОбмена, Элемент);
			КонецЦикла;
			
			ОбменДаннымиСервер.ВыбратьИзменения(УзелДляОбмена, НомерОтправленного, КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты);
		КонецЕсли;
		
		//не записываем номер отправленного сообщения, т.к. 
		//для событийного обмена не важен и в процессе 
		//формирования сообщения не формируется
		//в сообщение записывается время в милисекундах на текущий момент
		
		//Получатель = УзелДляОбмена.ПолучитьОбъект();
		//Получатель.НомерОтправленного = НомерОтправленного;
		//Получатель.ОбменДанными.Загрузка = Истина;
		//Получатель.Записать();
		
	КонецЕсли;
	
	КомпонентыОбмена.ФайлОбмена.ЗаписатьКонецЭлемента(); // Body
	КомпонентыОбмена.ФайлОбмена.ЗаписатьКонецЭлемента(); // Message
	
	// Фиксация успешного завершения обмена.
	Если КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Неопределено Тогда
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	КонецЕсли;
	
	Если КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
		И (КомпонентыОбмена.ПропускатьОбъектыСОшибкамиПроверкиПоСхеме
			И КомпонентыОбмена.НеВыгруженныеОбъекты.Количество() > 0) Тогда
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;
	КонецЕсли;
	
КонецПроцедуры

Функция exch_ЭтоОбъектСсылочногоТипа(Объект)
	ИмяОбъектаМетаданных = "";
    Попытка
    	ИмяОбъектаМетаданных = Объект.Метаданные().ПолноеИмя();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
    Позиция = СтрНайти(ИмяОбъектаМетаданных, ".");
    Если Позиция > 0 Тогда 
        ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);    
        Возврат ИмяБазовогоТипа = "Справочник"
            Или ИмяБазовогоТипа = "Документ"
            Или ИмяБазовогоТипа = "БизнесПроцесс"
            Или ИмяБазовогоТипа = "Задача"
            Или ИмяБазовогоТипа = "ПланСчетов"
            Или ИмяБазовогоТипа = "ПланОбмена"
            Или ИмяБазовогоТипа = "ПланВидовХарактеристик"
            Или ИмяБазовогоТипа = "ПланВидовРасчета";
    Иначе
        Возврат Ложь;
    КонецЕсли;
    
КонецФункции

//Исходный вариант: Модуль ОбменДаннымиXDTOСервер.ВыполнитьВыгрузкуЗарегистрированныхДанных
Процедура exch_ВыполнитьВыгрузкуЗарегистрированныхДанных(КомпонентыОбмена, НомерСообщения)
	
	Если НЕ КомпонентыОбмена.Свойство("exch_ОбъектВыгрузки") Тогда 
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.exch_ОбъектВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелДляОбмена = КомпонентыОбмена.УзелКорреспондента;
	
	Если НЕ exch_ОбменДаннымиПроверки.ЭтоУзелДляОбменаПоСобытиям(УзелДляОбмена) Тогда	
		Возврат;
	КонецЕсли;
	
	НачальнаяВыгрузкаДанных = Ложь;
	
	Данные = КомпонентыОбмена.exch_ОбъектВыгрузки;
	Если exch_ЭтоОбъектСсылочногоТипа(Данные) Тогда
		Данные = Данные.ПолучитьОбъект();
	КонецЕСли;
	//
	//ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(
	//	УзелДляОбмена, 
	//	НомерСообщения,
	//	фильтр
	//); 	
		
	КоличествоОбъектовКВыгрузке = 1;
	//Пока ВыборкаИзменений.Следующий() Цикл
	//	КоличествоОбъектовКВыгрузке = КоличествоОбъектовКВыгрузке + 1;
	//КонецЦикла;
	КомпонентыОбмена.Вставить("КоличествоОбъектовКВыгрузке", КоличествоОбъектовКВыгрузке);
	
	УзелДляОбменаОбъект = УзелДляОбмена.ПолучитьОбъект();
	
	//  Алгоритм выгрузки данных в XML-файл:
	// 1. Получаем Данные из ИБ
	// 2. Отправляем информацию об удалении либо выгружаем данные.
	// 3. Конвертируем Данные в Структуру по правилу конвертации.
	// 4. Конвертируем Данные в Структуру в обработчике ПриОтправкеДанных.
	// 5. Конвертируем Структуру в ОбъектXDTO.
	// 6. Записываем ОбъектXDTO в XML-файл.
	//ВыборкаИзменений.Сбросить();
	//Пока ВыборкаИзменений.Следующий() Цикл
	//	Данные = ВыборкаИзменений.Получить();
		//Данные = КомпонентыОбмена.exch_ОбъектВыгрузки;
		Попытка
			Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
				ВыгрузитьУдаление(КомпонентыОбмена, Данные.Ссылка);
			Иначе
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
				ОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(Данные, ОтправкаЭлемента, НачальнаяВыгрузкаДанных, УзелДляОбменаОбъект, Ложь);
				
				// Удаление регистра отсылаем в виде пустого набора записей.
				Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
					И ОбщегоНазначения.ЭтоРегистр(Данные.Метаданные()) Тогда
					ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
				КонецЕсли;
				
				Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить Тогда
					ВыгрузитьУдаление(КомпонентыОбмена, Данные.Ссылка);
				ИначеЕсли ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
					// Ситуация, когда объект не соответствует условиям фильтра, но его не нужно отправлять как удаление.
					// Возникает в случае первоначальной выгрузки данных.
					//Продолжить;
					Возврат;
				Иначе
					ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Данные);
				КонецЕсли;
			КонецЕсли;
			
			КомпонентыОбмена.СчетчикВыгруженныхОбъектов = КомпонентыОбмена.СчетчикВыгруженныхОбъектов + 1;
			ОбменДаннымиСервер.РассчитатьПроцентВыгрузки(КомпонентыОбмена.СчетчикВыгруженныхОбъектов, КомпонентыОбмена.КоличествоОбъектовКВыгрузке);
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПредставлениеДанных = ПредставлениеОбъектаДляПротокола(Данные);
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Событие: %1.
				|Объект: %2.
				|
				|%3'"),
				КомпонентыОбмена.НаправлениеОбмена,
				ПредставлениеДанных,
				ПодробноеПредставлениеОшибки(Инфо));
		КонецПопытки;
	//КонецЦикла;
	
КонецПроцедуры
