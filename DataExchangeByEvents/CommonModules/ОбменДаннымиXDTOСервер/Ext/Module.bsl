// Открывает файл выгрузки данных, записывает заголовок файла в соответствие с форматом обмена.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  ИмяФайлаОбмена - строка - имя файла обмена.
//
Процедура exch_ОткрытьФайлВыгрузки(КомпонентыОбмена, НомерОтправленного = 0, НомерПринятого = 0) Экспорт

	Если Не КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		ВызватьИсключение "Событийный обмен данными возможен только для узлов плана обмена.";
	КонецЕсли;
	
	ФайлОбмена = Новый ЗаписьXML;
	ФайлОбмена.УстановитьСтроку();
	ФайлОбмена.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = Неопределено;	

	ЗаписьСообщения = Новый Структура("НомерПринятого, НомерСообщения, Получатель");
	ЗаписьСообщения.Получатель = КомпонентыОбмена.УзелКорреспондента;
	
	//не блокируем редактирование, т.к. обмен идет по событиям, то номер отправленного 
	//сообщения является просто идентификатором и предпочтительней было бы использовать 
	//например GUID
	
	// Устанавливаем блокировку на узел получателя.
	//Попытка
	//	ЗаблокироватьДанныеДляРедактирования(ЗаписьСообщения.Получатель);
	//Исключение
	//	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//		НСтр("ru = 'Ошибка установки блокировки на обмен данными.
	//		|Возможно, обмен данными выполняется другим сеансом.
	//		|
	//		|Подробности:
	//		|%1'"),
	//		КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	//КонецПопытки;
	
	//ДанныеПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаписьСообщения.Получатель, "НомерОтправленного, НомерПринятого, Код");
	
	//станавливаем номер отправленного для сообщения с данными обмена.
	//0 -- для квитанции подтверждения получения и обработки данных обмена
	ЗаписьСообщения.НомерСообщения = НомерОтправленного;	

	//тест идеи записывать в номер сообщения еще и не полное время отправки в последние 12 знаков
	//для получения полного времени отправки надо 
	//Цел(ТекущуюДату в миллисекундах / 1Е12) * 1Е12 + число из последних 12 знаков номера сообщения
	//
	//ЗаписьСообщения.НомерСообщения = 
	//	ДанныеПолучателя.НомерОтправленного*1000000000000
	//	+Число(Прав(XMLСтрока(ТекущаяУниверсальнаяДатаВМиллисекундах()),12))
	//;
	
	//ставим номер принятого и обработанного при отправке квитанции одтверждения
	//0 -- для сообщения с данными
	ЗаписьСообщения.НомерПринятого = НомерПринятого;
	
	ПараметрыЗаголовка = ПараметрыЗаголовкаСообщенияОбмена();
	
	ПараметрыЗаголовка.ФорматОбмена            = КомпонентыОбмена.XMLСхема;
	ПараметрыЗаголовка.ЭтоОбменЧерезПланОбмена = КомпонентыОбмена.ЭтоОбменЧерезПланОбмена;
	ПараметрыЗаголовка.ВерсияФорматаОбмена     = КомпонентыОбмена.ВерсияФорматаОбмена;
	
	ПараметрыЗаголовка.ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(КомпонентыОбмена.УзелКорреспондента);
	ПараметрыЗаголовка.ПсевдонимПредопределенногоУзла = ОбменДаннымиСервер.ПсевдонимПредопределенногоУзла(КомпонентыОбмена.УзелКорреспондента);
	
	ПараметрыЗаголовка.ИдентификаторПолучателя  = ОбменДаннымиСервер.ИдентификаторУзлаКорреспондентаДляОбмена(КомпонентыОбмена.УзелКорреспондента);
	ПараметрыЗаголовка.ИдентификаторОтправителя = ОбменДаннымиСервер.ИдентификаторЭтогоУзлаДляОбмена(КомпонентыОбмена.УзелКорреспондента);
		
	Если Не КомпонентыОбмена.ТолькоНастройкиXDTO Тогда
		ПараметрыЗаголовка.НомерСообщения = ЗаписьСообщения.НомерСообщения;
		ПараметрыЗаголовка.НомерПринятого = ЗаписьСообщения.НомерПринятого;
	КонецЕсли;
	
	ПараметрыЗаголовка.ПоддерживаемыеВерсии  = КомпонентыОбмена.НастройкиXDTO.ПоддерживаемыеВерсии;
	ПараметрыЗаголовка.ПоддерживаемыеОбъекты = КомпонентыОбмена.НастройкиXDTO.ПоддерживаемыеОбъекты;
	
	ПараметрыЗаголовка.Префикс = ОбменДаннымиСервер.ПрефиксИнформационнойБазы();
	
	ПараметрыЗаголовка.УзелКорреспондента = КомпонентыОбмена.УзелКорреспондента;

	
	ЗаписатьЗаголовокСообщенияОбмена(ФайлОбмена, ПараметрыЗаголовка);
	
	Если Не КомпонентыОбмена.ТолькоНастройкиXDTO Тогда
		// Записываем элемент <Body>
		ФайлОбмена.ЗаписатьНачалоЭлемента("Body");
		ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("", КомпонентыОбмена.XMLСхема);
	КонецЕсли;
	
	КомпонентыОбмена.Вставить("ФайлОбмена", ФайлОбмена);
	
КонецПроцедуры

// Открывает файл загрузки данных, записывает заголовок файла в соответствие с форматом обмена.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//  ИмяФайлаОбмена - строка - Имя файла обмена.
//
Процедура exch_ОткрытьФайлЗагрузки(КомпонентыОбмена, Знач СообщениеОбмена) Экспорт
	
	ЭтоОбменЧерезПланОбмена = КомпонентыОбмена.ЭтоОбменЧерезПланОбмена;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	КомпонентыОбмена.ФлагОшибки = Истина;
	
	ПрерватьЦикл = Ложь;
	Пока Не ПрерватьЦикл Цикл
		ПрерватьЦикл = Истина;
		
		Попытка
			ЧтениеXML.УстановитьСтроку(СообщениеОбмена);
			КомпонентыОбмена.Вставить("ФайлОбмена", ЧтениеXML);
		Исключение
			СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка при загрузке данных: %1'");
			СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ОписаниеОшибки());
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщенияОбОшибке);
			Прервать;
		КонецПопытки;
		
		ЧтениеXML.Прочитать(); // Message
		Если (ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "Message") Тогда
			Если СообщениеОтНеобновленнойНастройки(ЧтениеXML) Тогда
				СтрокаСообщенияОбОшибке = НСтр("ru = 'Получение данных от источника, в котором не выполнено
					|обновление настройки синхронизации данных. Необходимо:'")
					+ Символы.ПС + НСтр("ru = '1) Выполнить повторную синхронизацию данных через некоторое время.'")
					+ Символы.ПС + НСтр("ru = '2) Выполнить синхронизацию данных на стороне источника, после этого 
					|повторно выполнить синхронизацию данных в этой информационной базе.'")
					+ Символы.ПС + НСтр("ru = '(1 - для вида транспорта Через интернет, 2 - для вида транспорта Другое)'");
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщенияОбОшибке);
			Иначе
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		ЧтениеXML.Прочитать(); // Header
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
			Или ЧтениеXML.ЛокальноеИмя <> "Header" Тогда
			ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
			Прервать;
		КонецЕсли;
		
		Header = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип(XMLБазоваяСхема(), "Header"));
		
		URIФормата = Header.Format;
		
		Если ЭтоОбменЧерезПланОбмена Тогда
			
			Если Не Header.Установлено("Confirmation") Тогда
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
				Прервать;
			КонецЕсли;
			
			Confirmation = Header.Confirmation;
			
			ИмяПланаОбмена = Confirmation.ExchangePlan;
			
			Если Метаданные.ПланыОбмена.Найти(ИмяПланаОбмена) = Неопределено Тогда
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 177);
				Прервать;
			КонецЕсли;
			
			ФорматПланаОбмена = ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(ИмяПланаОбмена, "ФорматОбмена");
			
			КомпонентыОбмена.ТолькоНастройкиXDTO =
				Не ОбменДаннымиСервер.НастройкаСинхронизацииЗавершена(КомпонентыОбмена.УзелКорреспондента)
					Или (URIФормата = ФорматПланаОбмена);
			
			КомпонентыОбмена.НомерВходящегоСообщения = Confirmation.MessageNo;
			КомпонентыОбмена.НомерСообщенияПолученногоКорреспондентом = Confirmation.ReceivedNo;
			
			Если Не КомпонентыОбмена.ТолькоНастройкиXDTO Тогда
				КомпонентыОбмена.XMLСхема = URIФормата;
				
				ФорматОбмена = РазложитьФорматОбмена(КомпонентыОбмена.XMLСхема);
				
				// Проверяем базовый формат.
				Если ФорматПланаОбмена <> ФорматОбмена.БазовыйФормат Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Формат сообщения обмена ""%1"" не соответствует формату плана обмена ""%2"".'"),
						ФорматОбмена.БазовыйФормат,
						ФорматПланаОбмена);
					ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщения);
					Прервать;
				КонецЕсли;
				
				// Проверяем версию формата сообщения обмена.
				Если ВерсииФорматаОбменаМассив(КомпонентыОбмена.УзелКорреспондента).Найти(ФорматОбмена.Версия) = Неопределено Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Версия ""%1"" формата сообщения обмена ""%2"" не поддерживается.'"),
						ФорматОбмена.Версия, ФорматОбмена.БазовыйФормат);
					ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщения);
					Прервать;
				КонецЕсли;
				
				КомпонентыОбмена.ВерсияФорматаОбмена = ФорматОбмена.Версия;
				КомпонентыОбмена.МенеджерОбмена      = МенеджерОбменаВерсииФормата(КомпонентыОбмена.ВерсияФорматаОбмена,
					КомпонентыОбмена.УзелКорреспондента);
					
				КодОтКого = Confirmation.From;
				КодКому   = Confirmation.To;
				
				КодОтКогоНовый = "";
				Если Header.Установлено("NewFrom") Тогда
					КодОтКогоНовый = Header.NewFrom;
				КонецЕсли;
				
				//Если КомпонентыОбмена.НомерВходящегоСообщения <= 0 Тогда
				КомпонентыОбмена.ИспользоватьКвитирование = Истина;
				//КонецЕсли;
				
				ПолучательИзСообщения = ОбменДаннымиСервер.УзелПланаОбменаПоКоду(ИмяПланаОбмена, КодКому);
				Если ПолучательИзСообщения <> ПланыОбмена[ИмяПланаОбмена].ЭтотУзел() Тогда
					// Возможно, задан виртуальный код получателя.
					ПсевдонимПредопределенногоУзла = ОбменДаннымиСервер.ПсевдонимПредопределенногоУзла(КомпонентыОбмена.УзелКорреспондента);
					Если ПсевдонимПредопределенногоУзла <> КодКому Тогда
						ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 178);
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				ОтправительИзСообщения = ОбменДаннымиСервер.УзелПланаОбменаПоКоду(ИмяПланаОбмена, КодОтКого);
				Если (ОтправительИзСообщения = Неопределено
						Или ОтправительИзСообщения <> КомпонентыОбмена.УзелКорреспондента)
					И ЗначениеЗаполнено(КодОтКогоНовый) Тогда
					ОтправительИзСообщения = ОбменДаннымиСервер.УзелПланаОбменаПоКоду(ИмяПланаОбмена, КодОтКогоНовый);
				КонецЕсли;
				
				Если ОтправительИзСообщения = Неопределено
					Или ОтправительИзСообщения <> КомпонентыОбмена.УзелКорреспондента Тогда
					
					СтрокаСообщения = НСтр("ru = 'Не найден узел обмена для загрузки данных. План обмена: %1, Идентификатор: %2'");
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяПланаОбмена, КодОтКого);
					ЗаписатьВПротоколВыполнения(КомпонентыОбмена, СтрокаСообщения);
					Прервать;
					
				КонецЕсли;
				
				Если КомпонентыОбмена.ИспользоватьКвитирование Тогда
					//исключаем т.к. теперь регистрацию необходимо чистить по номеру.
					//НомерПринятого = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КомпонентыОбмена.УзелКорреспондента, "НомерПринятого");
					//
					//Если НомерПринятого >= КомпонентыОбмена.НомерВходящегоСообщения Тогда
					//	// Номер сообщения меньше либо равен ранее принятому.
					//	КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена =
					//		Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято;
					//		
					//	ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 174,,,,, Истина);
					//	КомпонентыОбмена.ТолькоНастройкиXDTO = Истина;
					//Иначе
						// Добавляем публичные идентификаторы для ссылочных объектов, о получении которых отчитался узел-корреспондент.
						ДобавитьВыгруженныеОбъектыВРегистрПубличныеИдентификаторы(КомпонентыОбмена);
						
						//Удаляем регистацию изменений только по одному номеру сообщения, а не по всем младшим
						//номерам. Для этого запросом выбираем изменения соответствующие номеру сообщения.
						ПакетИзменений = 
							exch_ОбменДаннымиЗарегистрированныеИзменения.ПакетЗарегистрированныхИзменений(
								КомпонентыОбмена.УзелКорреспондента, 
								КомпонентыОбмена.НомерСообщенияПолученногоКорреспондентом
							);
							
						Для Каждого Результат Из ПакетИзменений Цикл
							СтруктураОтбора = 
								exch_ОбменДаннымиЗарегистрированныеИзменения.СтруктураРегистрацииОбъекта(Результат);
							ВыборкаИзменений = Результат.Выбрать();
							
							РегистрацииКУдалению = Новый Массив;
							Пока ВыборкаИзменений.Следующий() Цикл
								ЗаполнитьЗначенияСвойств(СтруктураОтбора, ВыборкаИзменений);
								ПланыОбмена.УдалитьРегистрациюИзменений(
									КомпонентыОбмена.УзелКорреспондента, 
									exch_ОбменДаннымиЗарегистрированныеИзменения.ДанныеРегистрации(СтруктураОтбора)
								);								
							КонецЦикла;							
						КонецЦикла;
						// Снимаем признак начальной выгрузки данных.
						РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.СнятьПризнакНачальнойВыгрузкиДанных(
							КомпонентыОбмена.УзелКорреспондента, КомпонентыОбмена.НомерСообщенияПолученногоКорреспондентом);
					//КонецЕсли;					
				КонецЕсли;
					
			КонецЕсли;
			
			ЗаполнитьСтруктуруНастроекXDTOКорреспондента(КомпонентыОбмена.НастройкиXDTOКорреспондента,
				Header, Не (URIФормата = ФорматПланаОбмена), КомпонентыОбмена.УзелКорреспондента);
				
			Если Header.Установлено("Prefix") Тогда
				КомпонентыОбмена.ПрефиксКорреспондента = Header.Prefix;
			КонецЕсли;
			
			// Проверяем поддержку кодировки по УИДам в корреспонденте.
			КомпонентыОбмена.Вставить("КорреспондентПоддерживаетИдентификаторОбменаДанными",
				ВерсияПоддерживается(КомпонентыОбмена.НастройкиXDTOКорреспондента.ПоддерживаемыеВерсии, НомерВерсииСПоддержкойИдентификатораОбменаДанными()));
				
		Иначе
				
			КомпонентыОбмена.XMLСхема = URIФормата;
			
			ФорматОбмена = РазложитьФорматОбмена(КомпонентыОбмена.XMLСхема);
			
			КомпонентыОбмена.ВерсияФорматаОбмена = ФорматОбмена.Версия;
			КомпонентыОбмена.МенеджерОбмена      = МенеджерОбменаВерсииФормата(КомпонентыОбмена.ВерсияФорматаОбмена);
			
		КонецЕсли;
		
		Если Не КомпонентыОбмена.ТолькоНастройкиXDTO Тогда
			Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
				Или ЧтениеXML.ЛокальноеИмя <> "Body" Тогда
				ЗаписатьВПротоколВыполнения(КомпонентыОбмена, 9);
				Прервать;
			КонецЕсли;
			
			ЧтениеXML.Прочитать(); // Body
		КонецЕсли;
		
		КомпонентыОбмена.ФлагОшибки = Ложь;
		
	КонецЦикла;
	
	Если КомпонентыОбмена.ФлагОшибки Тогда
		ЧтениеXML.Закрыть();
	Иначе
		КомпонентыОбмена.Вставить("ФайлОбмена", ЧтениеXML);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет выгрузку данных в соответствии с правилами и параметрами обмена.
//
// Параметры:
//  КомпонентыОбмена - Структура - содержит все правила и параметры обмена.
//
Процедура exch_ПроизвестиВыгрузкуДанных(КомпонентыОбмена, НомерОтправленного) Экспорт
	
	Если НЕ КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		Возврат;
	КонецЕсли;

	УзелДляОбмена = КомпонентыОбмена.УзелКорреспондента;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		ОчиститьСписокОшибокПриВыгрузкеДанных(УзелДляОбмена);
	КонецЕсли;
	
	Попытка
		КомпонентыОбмена.МенеджерОбмена.ПередКонвертацией(КомпонентыОбмена);
	Исключение
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Направление: %1.
			|Обработчик: ПередКонвертацией.
			|
			|Ошибка выполнения обработчика.
			|%2.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	exch_ВыполнитьВыгрузкуЗарегистрированныхДанных(КомпонентыОбмена, НомерОтправленного);
	
	Если КомпонентыОбмена.ФлагОшибки Тогда
		ВызватьИсключение НСтр("ru = 'При формировании сообщения обмена данными произошли ошибки. Подробнее см. в журнале регистрации.'");
	КонецЕсли;
	
	Попытка
		КомпонентыОбмена.МенеджерОбмена.ПослеКонвертации(КомпонентыОбмена);
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Событие: %1.
				|Обработчик: ПослеКонвертации.
				|
				|Ошибка выполнения обработчика.
				|%2.'"),
			КомпонентыОбмена.НаправлениеОбмена,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
	Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		
		// Сбрасываем номер отправленного сообщения у не выгруженных объектов.
		Если КомпонентыОбмена.ПропускатьОбъектыСОшибкамиПроверкиПоСхеме Тогда
			Для Каждого ОбъектСсылка Из КомпонентыОбмена.НеВыгруженныеОбъекты Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелДляОбмена, ОбъектСсылка);
			КонецЦикла;
		КонецЕсли;
		
		// Назначаем номер отправленного сообщения для объектов, выгруженных по ссылке.
		Если КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты.Количество() > 0 Тогда
			// Выполняем регистрацию объектов на текущем узле, которые были выгружены по ссылке.
			Для Каждого Элемент Из КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелДляОбмена, Элемент);
			КонецЦикла;
			
			ОбменДаннымиСервер.ВыбратьИзменения(УзелДляОбмена, НомерОтправленного, КомпонентыОбмена.ВыгруженныеПоСсылкеОбъекты);
		КонецЕсли;
		
		//не записываем номер отправленного сообщения, т.к. 
		//для событийного обмена не важен и в процессе 
		//формирования сообщения не формируется
		//в сообщение записывается время в милисекундах на текущий момент 		
		
	КонецЕсли;
	
	КомпонентыОбмена.ФайлОбмена.ЗаписатьКонецЭлемента(); // Body
	КомпонентыОбмена.ФайлОбмена.ЗаписатьКонецЭлемента(); // Message
	
	// Фиксация успешного завершения обмена.
	Если КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Неопределено Тогда
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
	КонецЕсли;
	
	Если КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
		И (КомпонентыОбмена.ПропускатьОбъектыСОшибкамиПроверкиПоСхеме
			И КомпонентыОбмена.НеВыгруженныеОбъекты.Количество() > 0) Тогда
		КомпонентыОбмена.СостояниеОбменаДанными.РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями;
	КонецЕсли;
	
КонецПроцедуры
	
//Исходный вариант: Модуль ОбменДаннымиXDTOСервер.ВыполнитьВыгрузкуЗарегистрированныхДанных
Процедура exch_ВыполнитьВыгрузкуЗарегистрированныхДанных(КомпонентыОбмена, НомерСообщения)
	
	Если НЕ КомпонентыОбмена.Свойство("exch_ОбъектВыгрузки") Тогда 
		Возврат;
	КонецЕсли;
	
	Если КомпонентыОбмена.exch_ОбъектВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УзелДляОбмена = КомпонентыОбмена.УзелКорреспондента;
	
	Если НЕ exch_ОбменДаннымиПроверки.ЭтоУзелДляОбменаПоСобытиям(УзелДляОбмена) Тогда	
		Возврат;
	КонецЕсли;
	
	НачальнаяВыгрузкаДанных = Ложь;
	
	фильтр = exch_ОбменДаннымиЗарегистрированныеИзменения.ДанныеРегистрации(КомпонентыОбмена.exch_ОбъектВыгрузки);
	
	Если фильтр = Неопределено Тогда
		//если фильтр не определен, то
		//объект выгрузки передан с ошибкой
		ВызватьИсключение "Ошибка отбора данных для выгрузки.";
	КонецЕсли;
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(
		УзелДляОбмена, 
		НомерСообщения,
		фильтр
	); 	
		
	КоличествоОбъектовКВыгрузке = 1;
	Пока ВыборкаИзменений.Следующий() Цикл
		КоличествоОбъектовКВыгрузке = КоличествоОбъектовКВыгрузке + 1;
	КонецЦикла;
	КомпонентыОбмена.Вставить("КоличествоОбъектовКВыгрузке", КоличествоОбъектовКВыгрузке);
	
	УзелДляОбменаОбъект = УзелДляОбмена.ПолучитьОбъект();
	
	//  Алгоритм выгрузки данных в XML-файл:
	// 1. Получаем Данные из ИБ
	// 2. Отправляем информацию об удалении либо выгружаем данные.
	// 3. Конвертируем Данные в Структуру по правилу конвертации.
	// 4. Конвертируем Данные в Структуру в обработчике ПриОтправкеДанных.
	// 5. Конвертируем Структуру в ОбъектXDTO.
	// 6. Записываем ОбъектXDTO в XML-файл.
	ВыборкаИзменений.Сбросить();
	Пока ВыборкаИзменений.Следующий() Цикл
		Данные = ВыборкаИзменений.Получить();
		//Данные = КомпонентыОбмена.exch_ОбъектВыгрузки;
		Попытка
			Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
				ВыгрузитьУдаление(КомпонентыОбмена, Данные.Ссылка);
			Иначе
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
				ОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(Данные, ОтправкаЭлемента, НачальнаяВыгрузкаДанных, УзелДляОбменаОбъект, Ложь);
				
				// Удаление регистра отсылаем в виде пустого набора записей.
				Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
					И ОбщегоНазначения.ЭтоРегистр(Данные.Метаданные()) Тогда
					ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
				КонецЕсли;
				
				Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить Тогда
					ВыгрузитьУдаление(КомпонентыОбмена, Данные.Ссылка);
				ИначеЕсли ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
					// Ситуация, когда объект не соответствует условиям фильтра, но его не нужно отправлять как удаление.
					// Возникает в случае первоначальной выгрузки данных.
					//Продолжить;
					Возврат;
				Иначе
					ВыгрузкаОбъектаВыборки(КомпонентыОбмена, Данные);
				КонецЕсли;
			КонецЕсли;
			
			КомпонентыОбмена.СчетчикВыгруженныхОбъектов = КомпонентыОбмена.СчетчикВыгруженныхОбъектов + 1;
			ОбменДаннымиСервер.РассчитатьПроцентВыгрузки(КомпонентыОбмена.СчетчикВыгруженныхОбъектов, КомпонентыОбмена.КоличествоОбъектовКВыгрузке);
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПредставлениеДанных = ПредставлениеОбъектаДляПротокола(Данные);
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Событие: %1.
				|Объект: %2.
				|
				|%3'"),
				КомпонентыОбмена.НаправлениеОбмена,
				ПредставлениеДанных,
				ПодробноеПредставлениеОшибки(Инфо));
		КонецПопытки;
	КонецЦикла;	
КонецПроцедуры
