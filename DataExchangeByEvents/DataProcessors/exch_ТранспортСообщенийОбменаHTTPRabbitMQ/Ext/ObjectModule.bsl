//для подключения к очереди используется бесплатная компонента
//https://github.com/BITERP/PinkRabbitMQ
//в расширении сохранена для Windows в двух версиях x32 и x64 
//макеты exch_PinkRabbitMQ_AddIn

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
Перем СтрокаСообщенияОбОшибке Экспорт;
Перем СтрокаСообщенияОбОшибкеЖР Экспорт;

Перем ДанныеСообщенияXML Экспорт;
Перем ОчередьСообщенийПуста Экспорт;

Перем СообщенияОшибок; // Соответствие с предопределенными сообщениями ошибок обработки.
Перем ИмяОбъекта;		// имя объекта метаданных
Перем ИмяMQСервера;		// Адрес MQ сервера - имя или ip адрес.
Перем ПортMQСервера;
Перем ИмяMQХоста;		//VHost
Перем ИмяПользователя;
Перем ПарольПользователя;
Перем ИмяMQОбменника;	//Exchange
Перем ИмяОчередиИсходящихСообщений;// Имя очереди, в которую помещаются сообщения обмена.
Перем ИмяОчередиВходящихСообщений;// Имя очереди, из которой читаются сообщения обмена.

Перем ТаймаутОтправкиПолученияДанных; // Таймаут, соединения при отправке и получении данных.
Перем КлиентОбмена; //клиент на базе компоненты обращения к RabbitMQ
Перем Потребитель; //ид канала получения сообщений
Перем ОткрытьКаналНаЧтение; //признак того, что обработка работает на чтение сообщений
Перем КаналНаЧтениеОткрыт; //флаг запрещающий повторное подключение consumer к очереди сообщений						

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции.

// Инициирует компоненту доступа к брокеру сообщений
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево - Истина - удалось выполнить функцию, Ложь - произошла ошибка.
// 
Функция ВыполнитьДействияПередОбработкойСообщения() Экспорт
	
	Система = Новый СистемнаяИнформация;
	Если КлиентОбмена <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		Если Система.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		    //УстановитьВнешнююКомпоненту("ОбщийМакет.exch_PinkRabbitMQ_AddIn32");
		    ПодключитьВнешнююКомпоненту("ОбщийМакет.exch_PinkRabbitMQ_AddIn32", "BITERP", ТипВнешнейКомпоненты.Native);
		    КлиентОбмена = Новый("AddIn.BITERP.PinkRabbitMQ");			
		ИначеЕсли Система.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			//УстановитьВнешнююКомпоненту("ОбщийМакет.exch_PinkRabbitMQ_AddIn");
		    ПодключитьВнешнююКомпоненту("ОбщийМакет.exch_PinkRabbitMQ_AddIn", "BITERP", ТипВнешнейКомпоненты.Native);
		    КлиентОбмена = Новый("AddIn.BITERP.PinkRabbitMQ");
		Иначе
			УстановитьСтрокуСообщенияОбОшибке("Данный вид обмена возможен только в системе Windows.");
			Возврат Ложь;
		КонецЕсли;			
	Исключение
		ошибка = ОписаниеОшибки();
		ошибкаКлиентаОбмена = КлиентОбмена.GetLastError();
		КлиентОбмена = Неопределено;
		УстановитьСтрокуСообщенияОбОшибке(ошибка+"; "+ошибкаКлиентаОбмена);
		Возврат Ложь;
	КонецПопытки;			
		
	Возврат Истина; 
	
КонецФункции

// Выполняет отправку сообщения обмена на заданный ресурс из временного каталога сообщения обмена.
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево - Истина - удалось выполнить функцию, Ложь - произошла ошибка.
// 
Функция ОтправитьСообщение() Экспорт
	
	ИнициализацияСообщений();
	
	Если КлиентОбмена = Неопределено Тогда
		УстановитьСтрокуСообщенияОбОшибке("Не инициализирована компонента обмена.");
		Возврат Ложь;
	КонецЕсли;
		
	Попытка
		//BasicPublish - Отправить сообщение
		//Параметры:
		//    exchange - Строка - Имя точки в которую отправляется сообщение
		//    routingKey - Строка - Ключ маршрутизации (см. руководство RMQ)
		//    message - Строка - Тело сообщения
		//    livingTime - Число - [НЕ РЕАЛИЗОВАНО] Время жизни сообщения в миллисекундах
		//    persist - Булево - Сбрасывать сообщение на диск
		КлиентОбмена.BasicPublish(ИмяMQОбменника, ИмяОчередиИсходящихСообщений, ДанныеСообщенияXML, 0, Ложь);
	Исключение
		УстановитьСтрокуСообщенияОбОшибке(КлиентОбмена.GetLastError());
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Получает сообщение обмена с заданного ресурса 
//
// Параметры:
//  ПроверкаНаличия - Булево - Истина, если необходимо только проверить наличие сообщений обмена, без их загрузки.
// 
//  Возвращаемое значение:
//  Булево - Истина - удалось выполнить функцию, Ложь - произошла ошибка.
// 
Функция ПолучитьСообщение(ПроверкаНаличия = Ложь) Экспорт
	
	ИнициализацияСообщений();
	//ОчередьСообщенийПуста = Истина;
	//Возврат Истина;
	Если КлиентОбмена = Неопределено Тогда
		УстановитьСтрокуСообщенияОбОшибке("Не инициализирована компонента обмена.");
		Возврат Ложь;
	КонецЕсли;
	
	//BasicConsumeMessage - Получить сообщение
	//Параметры:
	//    consumerId - Строка - [НЕ РЕАЛИЗОВАНО] Имя зарегистрированного потребителя
	//    outdata - Строка - Выходной параметр. Тело сообщения.
	//    messageTag - Число - Выходной параметр. Тег сообщения для подтверждения через метод BasicAck
	//    timeout - Число - Таймаут ожидания сообщения в миллисекундах. 
	//						Не рекомендуется ставить параметр слшком низким, 
	//						т.к. сообщение просто может не успеть прийти из очереди. 
	///						Рекомендуемый диапазон 3000-60000.
	//Возвращаемое значение:
	//    Булево. Истина, если из очереди прочитано очередное сообщение. Ложь, если очередь пустая.

	ОчередьСообщенийПуста = Ложь;
    Попытка		
		ИдПолученногоСообщения = 0;
		СообщениеПрочитано = 
			КлиентОбмена.BasicConsumeMessage(
				Потребитель, 
				ДанныеСообщенияXML, 
				ИдПолученногоСообщения, 
				ТаймаутОтправкиПолученияДанных
			);
			
		//BasicAck - Отсылает серверу подтверждение (ack), что сообщение обработано и его можно удалить.
		//			Подтвердить можно любое прочитанное сообщение.
		//Параметры:
		//    messageTag - число - тег сообщения, который возвращается в параметре 
		//							метода BasicConsumeMessage			
        КлиентОбмена.BasicAck(ИдПолученногоСообщения);                        				
        ИдПолученногоСообщения = 0; // Обнуляем, чтобы избежать утечки памяти		     
		
		ОчередьСообщенийПуста = Не СообщениеПрочитано;
    Исключение
		ошибка = ОписаниеОшибки();
		ошибкаКлиентаОбмена = КлиентОбмена.GetLastError();
		КлиентОбмена = Неопределено;
		УстановитьСтрокуСообщенияОбОшибке(ошибка+"; "+ошибкаКлиентаОбмена);
		Возврат Ложь;
	КонецПопытки;	
	
	Возврат Истина;
КонецФункции

Процедура ПодтвердитьПолучениеСообщения() Экспорт
	//BasicAck - Отсылает серверу подтверждение (ack), что сообщение обработано и его можно удалить.
	//			Подтвердить можно любое прочитанное сообщение.
	//Параметры:
	//    messageTag - число - тег сообщения, который возвращается в параметре 
	//							метода BasicConsumeMessage			
    //КлиентОбмена.BasicAck(ИдПрочитанногоСообщения);
КонецПроцедуры

// Удаляет временный каталог сообщений обмена после выполнения выгрузки или загрузки данных.
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево - Истина
//
Функция ВыполнитьДействияПослеОбработкиСообщения() Экспорт
	
	ИнициализацияСообщений();
	КлиентОбмена = Неопределено;
	
	Возврат Истина;
	
КонецФункции

// Выполняет инициализацию свойств обработки начальными значениями и константами.
//
// Параметры:
//  Нет.
// 
Процедура Инициализация(УзелОбмена = Неопределено, НаЧтение = Ложь) Экспорт
	
	ИнициализацияСообщений();
	
	НастройкиУзла = exch_ОбменДаннымиНастройки.НастройкиУзла(УзелОбмена);
	
	Если НастройкиУзла = Неопределено Тогда	
		ВызватьИсключение "Не удалось определить настройки транспорта.";
	Иначе
		ИмяMQСервера 	= НастройкиУзла.АдресСервера;
		ПортMQСервера 	= НастройкиУзла.Порт;
		ИмяMQХоста 		= НастройкиУзла.VHost;
		ИмяMQОбменника 	= НастройкиУзла.Exchange;
		ИмяПользователя = НастройкиУзла.Пользователь;
		ПарольПользователя = НастройкиУзла.Пароль;
		ИмяОчередиИсходящихСообщений = НастройкиУзла.ИмяОчередиИсходящихСообщений;
		ИмяОчередиВходящихСообщений  = НастройкиУзла.ИмяОчередиВходящихСообщений;
		ТаймаутОтправкиПолученияДанных = НастройкиУзла.Таймаут;
	КонецЕсли;
	
	ОткрытьКаналНаЧтение = НаЧтение;
	КаналНаЧтениеОткрыт = Ложь;
КонецПроцедуры

// Выполняет проверку возможности установки подключения к заданному ресурсу.
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево - Истина - подключение может быть установлено; Ложь - нет.
//
Функция ПодключениеУстановлено() Экспорт
	 //т.к. стремимся использовать типовой механизм, то инициируем сразу и отправку
	 //и получение сообщений
	Если КлиентОбмена = Неопределено Тогда
		УстановитьСтрокуСообщенияОбОшибке("Не инициализирована компонента обмена.");
		Возврат Ложь;
	КонецЕсли;
	
	Если КаналНаЧтениеОткрыт <> Истина Тогда
		Попытка	//коннект необходим для оправки и получения	
			//Connect - устанавливает соединение с сервером RabbitMQ. 
			//Таймаут - 5 секунд. Если в течение этого времени сервер недоступен, 
			//а также указаны неверные логин, пароль или vhost, 
			//то будет возвращена ошибка, 
			//которая может быть получена через метод GetLastError.
			//
			//Параметры:
			//    host - Строка - Адрес сервера RabbitMQ
			//    port - Число - Порт работы через tcp (обычно 5672)
			//    login - Строка - Имя пользователя
			//    pwd - Строка - Пароль пользователя
			//    vhost - Строка - Vhost пользователя
			//    pingRate - Число - [НЕ РЕАЛИЗОВАНО][НЕОБЯЗАТЕЛЬНЫЙ]. Частота пульса

			КлиентОбмена.Connect(ИмяMQСервера, ПортMQСервера, ИмяПользователя, ПарольПользователя, ИмяMQХоста);
		Исключение
			ошибка = ОписаниеОшибки();
			ошибкаКлиентаОбмена = КлиентОбмена.GetLastError();
			КлиентОбмена = Неопределено;
			УстановитьСтрокуСообщенияОбОшибке(ошибка+"; "+ошибкаКлиентаОбмена);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ОткрытьКаналНаЧтение = Истина
		И КаналНаЧтениеОткрыт = Ложь
	Тогда
		Попытка //consumer - необходим для получения сообщений. забирает на себя сразу несколько сообщений
			//поэтому должен быть вычитан в одном потоке и только после этого закрыт.
			
			//BasicConsume - Начать чтение. Регистрирует потребителя сообщений для очереди.
			//Параметры:   
			//    queue - Строка - Очередь из которой будем читать сообщения.
			//    consumerId - Строка - [НЕ РЕАЛИЗОВАНО] имя потребителя. 
			//							Если не задан, то имя потребителя сгенерирует 
			//							сервер и вернет из метода
			//    noConfirm - Булево - [НЕ РЕАЛИЗОВАНО] не ждать подтверждения обработки. 
			//							Сообщения будут удалены из очереди сразу после отправки на клиента.
			//    exclusive - Булево - [НЕ РЕАЛИЗОВАНО] монопольно захватить очередь
			//    selectSize - Число - количество единовременно считываемых сообщений из очереди 
			//							в кеш компоненты. Оптимизационный параметр, который влияет 
			//							на скорость забора сообщений. Рекомендуемый диапазон 100-1000. 
			//							Нежелательно устанавливать слишком высокие значения, 
			//							т.к. чтение большого числа накопленных сообщений в очереди может 
			//							спровоцировать нехватку памяти на клиенте 1С и падение компоненты 
			//							без вызова исключения.
			//Возвращаемое значение:                          
			//    Строка. Имя потребителя, сгенерированное сервером или переданное в параметре ИмяПотребителя.
			Потребитель = КлиентОбмена.BasicConsume(ИмяОчередиВходящихСообщений, "", Истина, Ложь, 0);
			КаналНаЧтениеОткрыт = Истина;
		Исключение
			ошибка = ОписаниеОшибки();
			ошибкаКлиентаОбмена = КлиентОбмена.GetLastError();
			КлиентОбмена = Неопределено;
			УстановитьСтрокуСообщенияОбОшибке(ошибка+"; "+ошибкаКлиентаОбмена);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Функции-свойства

// Процедура-сеттер: запоминает данные сгенерированные конвертацией
//
// Возвращаемое значение:
//  Дата - время изменения файла сообщения обмена.
//
Процедура УстановитьДанныеСообщения(ДанныеXML) Экспорт
	
	ДанныеСообщенияXML = ДанныеXML;
	
	//Если ТипЗнч(ВременныйФайлСообщенияОбмена) = Тип("Файл") Тогда
	//	
	//	Если ВременныйФайлСообщенияОбмена.Существует() Тогда
	//		
	//		Результат = ВременныйФайлСообщенияОбмена.ПолучитьВремяИзменения();
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Функция-свойство: полное имя файла сообщения обмена.
//
// Возвращаемое значение:
//  Строка - полное имя файла сообщения обмена.
//
Функция ИмяФайлаСообщенияОбмена() Экспорт
	
	Имя = "";
	//
	//Если ТипЗнч(ВременныйФайлСообщенияОбмена) = Тип("Файл") Тогда
	//	
	//	Имя = ВременныйФайлСообщенияОбмена.ПолноеИмя;
	//	
	//КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

// Функция-свойство: полное имя каталога сообщения обмена.
//
// Возвращаемое значение:
//  Строка - полное имя каталога сообщения обмена.
//
Функция ИмяКаталогаСообщенияОбмена() Экспорт
	
	Имя = "";
	
	//Если ТипЗнч(ВременныйКаталогСообщенийОбмена) = Тип("Файл") Тогда
	//	
	//	Имя = ВременныйКаталогСообщенийОбмена.ПолноеИмя;
	//	
	//КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции.

Процедура УстановитьСтрокуСообщенияОбОшибке(Знач Сообщение)
	
	Если Сообщение = Неопределено Тогда
		Сообщение = НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	СтрокаСообщенияОбОшибке   = Сообщение;
	СтрокаСообщенияОбОшибкеЖР = ИмяОбъекта + ": " + Сообщение;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Инициализация

Процедура ИнициализацияСообщений()
	
	СтрокаСообщенияОбОшибке   = "";
	СтрокаСообщенияОбОшибкеЖР = "";
	
КонецПроцедуры

Процедура ИнициализацияСообщенийОшибок()
	
	СообщенияОшибок = Новый Соответствие;
	
	// Общие коды ошибок
	СообщенияОшибок.Вставить(001, НСтр("ru = 'В каталоге обмена информацией не был обнаружен файл сообщения с данными.'"));
	СообщенияОшибок.Вставить(002, НСтр("ru = 'Ошибка при распаковке сжатого файла сообщения.'"));
	СообщенияОшибок.Вставить(003, НСтр("ru = 'Ошибка при сжатии файла сообщения обмена.'"));
	СообщенияОшибок.Вставить(004, НСтр("ru = 'Ошибка при создании временного каталога.'"));
	СообщенияОшибок.Вставить(005, НСтр("ru = 'Архив не содержит файл сообщения обмена.'"));
	
	// Коды ошибок, зависящие от вида транспорта.
	СообщенияОшибок.Вставить(101, НСтр("ru = 'Не задан путь на сервере.'"));
	СообщенияОшибок.Вставить(102, НСтр("ru = 'Ошибка инициализации подключения к FTP-серверу.'"));
	СообщенияОшибок.Вставить(103, НСтр("ru = 'Ошибка подключения к FTP-серверу, проверьте правильность задания пути и права доступа к ресурсу.'"));
	СообщенияОшибок.Вставить(104, НСтр("ru = 'Ошибка при поиске файлов на FTP-сервере.'"));
	СообщенияОшибок.Вставить(105, НСтр("ru = 'Ошибка при получении файла с FTP-сервера.'"));
	СообщенияОшибок.Вставить(106, НСтр("ru = 'Ошибка удаления файла на FTP-сервере, проверьте права доступа к ресурсу.'"));
	
	СообщенияОшибок.Вставить(108, НСтр("ru = 'Превышен допустимый размер сообщения обмена.'"));
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ИнициализацияСообщений();
ИнициализацияСообщенийОшибок();

ИмяMQСервера = Неопределено;		// Адрес MQ сервера - имя или ip адрес.
ИмяОчередиИсходящихСообщений = Неопределено;// Имя очереди, в которую помещаются сообщения обмена.
ИмяОчередиВходящихСообщений = Неопределено;// Имя очереди, из которой читаются сообщения обмена.

ИмяОбъекта = НСтр("ru = 'Обработка: %1'");
ИмяОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяОбъекта, Метаданные().Имя);

ТаймаутОтправкиПолученияДанных = 12*60*60;

#КонецОбласти

#КонецЕсли